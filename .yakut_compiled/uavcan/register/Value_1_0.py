# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /Users/maksimdrachov/pycyphal-demo/public_regulated_data_types/uavcan/register/Value.1.0.dsdl
#
# Generated at:  2022-10-01 12:13:28.517876 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     uavcan.register.Value
# Version:       1.0
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations

from typing import Any as _Issue110_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_
import uavcan.primitive
import uavcan.primitive.array


def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))


# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class Value_1_0:
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    def __init__(self, *,
                 empty:        None | uavcan.primitive.Empty_1_0 = None,
                 string:       None | uavcan.primitive.String_1_0 = None,
                 unstructured: None | uavcan.primitive.Unstructured_1_0 = None,
                 bit:          None | uavcan.primitive.array.Bit_1_0 = None,
                 integer64:    None | uavcan.primitive.array.Integer64_1_0 = None,
                 integer32:    None | uavcan.primitive.array.Integer32_1_0 = None,
                 integer16:    None | uavcan.primitive.array.Integer16_1_0 = None,
                 integer8:     None | uavcan.primitive.array.Integer8_1_0 = None,
                 natural64:    None | uavcan.primitive.array.Natural64_1_0 = None,
                 natural32:    None | uavcan.primitive.array.Natural32_1_0 = None,
                 natural16:    None | uavcan.primitive.array.Natural16_1_0 = None,
                 natural8:     None | uavcan.primitive.array.Natural8_1_0 = None,
                 real64:       None | uavcan.primitive.array.Real64_1_0 = None,
                 real32:       None | uavcan.primitive.array.Real32_1_0 = None,
                 real16:       None | uavcan.primitive.array.Real16_1_0 = None) -> None:
        """
        uavcan.register.Value.1.0
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        If no parameters are provided, the first field will be default-initialized and selected.
        If one parameter is provided, it will be used to initialize and select the field under the same name.
        If more than one parameter is provided, a ValueError will be raised.
        :param empty:        uavcan.primitive.Empty.1.0 empty
        :param string:       uavcan.primitive.String.1.0 string
        :param unstructured: uavcan.primitive.Unstructured.1.0 unstructured
        :param bit:          uavcan.primitive.array.Bit.1.0 bit
        :param integer64:    uavcan.primitive.array.Integer64.1.0 integer64
        :param integer32:    uavcan.primitive.array.Integer32.1.0 integer32
        :param integer16:    uavcan.primitive.array.Integer16.1.0 integer16
        :param integer8:     uavcan.primitive.array.Integer8.1.0 integer8
        :param natural64:    uavcan.primitive.array.Natural64.1.0 natural64
        :param natural32:    uavcan.primitive.array.Natural32.1.0 natural32
        :param natural16:    uavcan.primitive.array.Natural16.1.0 natural16
        :param natural8:     uavcan.primitive.array.Natural8.1.0 natural8
        :param real64:       uavcan.primitive.array.Real64.1.0 real64
        :param real32:       uavcan.primitive.array.Real32.1.0 real32
        :param real16:       uavcan.primitive.array.Real16.1.0 real16
        """
        self._empty:        None | uavcan.primitive.Empty_1_0 = None
        self._string:       None | uavcan.primitive.String_1_0 = None
        self._unstructured: None | uavcan.primitive.Unstructured_1_0 = None
        self._bit:          None | uavcan.primitive.array.Bit_1_0 = None
        self._integer64:    None | uavcan.primitive.array.Integer64_1_0 = None
        self._integer32:    None | uavcan.primitive.array.Integer32_1_0 = None
        self._integer16:    None | uavcan.primitive.array.Integer16_1_0 = None
        self._integer8:     None | uavcan.primitive.array.Integer8_1_0 = None
        self._natural64:    None | uavcan.primitive.array.Natural64_1_0 = None
        self._natural32:    None | uavcan.primitive.array.Natural32_1_0 = None
        self._natural16:    None | uavcan.primitive.array.Natural16_1_0 = None
        self._natural8:     None | uavcan.primitive.array.Natural8_1_0 = None
        self._real64:       None | uavcan.primitive.array.Real64_1_0 = None
        self._real32:       None | uavcan.primitive.array.Real32_1_0 = None
        self._real16:       None | uavcan.primitive.array.Real16_1_0 = None
        _init_cnt_: int = 0

        if empty is not None:
            _init_cnt_ += 1
            self.empty = empty  # type: ignore

        if string is not None:
            _init_cnt_ += 1
            self.string = string  # type: ignore

        if unstructured is not None:
            _init_cnt_ += 1
            self.unstructured = unstructured  # type: ignore

        if bit is not None:
            _init_cnt_ += 1
            self.bit = bit  # type: ignore

        if integer64 is not None:
            _init_cnt_ += 1
            self.integer64 = integer64  # type: ignore

        if integer32 is not None:
            _init_cnt_ += 1
            self.integer32 = integer32  # type: ignore

        if integer16 is not None:
            _init_cnt_ += 1
            self.integer16 = integer16  # type: ignore

        if integer8 is not None:
            _init_cnt_ += 1
            self.integer8 = integer8  # type: ignore

        if natural64 is not None:
            _init_cnt_ += 1
            self.natural64 = natural64  # type: ignore

        if natural32 is not None:
            _init_cnt_ += 1
            self.natural32 = natural32  # type: ignore

        if natural16 is not None:
            _init_cnt_ += 1
            self.natural16 = natural16  # type: ignore

        if natural8 is not None:
            _init_cnt_ += 1
            self.natural8 = natural8  # type: ignore

        if real64 is not None:
            _init_cnt_ += 1
            self.real64 = real64  # type: ignore

        if real32 is not None:
            _init_cnt_ += 1
            self.real32 = real32  # type: ignore

        if real16 is not None:
            _init_cnt_ += 1
            self.real16 = real16  # type: ignore

        if _init_cnt_ == 0:
            self.empty = uavcan.primitive.Empty_1_0()  # Default initialization
        elif _init_cnt_ == 1:
            pass  # A value is already assigned, nothing to do
        else:
            raise ValueError(f'Union cannot hold values of more than one field')

    @property
    def empty(self) -> None | uavcan.primitive.Empty_1_0:
        """
        uavcan.primitive.Empty.1.0 empty
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._empty

    @empty.setter
    def empty(self, x: uavcan.primitive.Empty_1_0) -> None:
        if isinstance(x, uavcan.primitive.Empty_1_0):
            self._empty = x
        else:
            raise ValueError(f'empty: expected uavcan.primitive.Empty_1_0 got {type(x).__name__}')
        self._string = None
        self._unstructured = None
        self._bit = None
        self._integer64 = None
        self._integer32 = None
        self._integer16 = None
        self._integer8 = None
        self._natural64 = None
        self._natural32 = None
        self._natural16 = None
        self._natural8 = None
        self._real64 = None
        self._real32 = None
        self._real16 = None

    @property
    def string(self) -> None | uavcan.primitive.String_1_0:
        """
        uavcan.primitive.String.1.0 string
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._string

    @string.setter
    def string(self, x: uavcan.primitive.String_1_0) -> None:
        if isinstance(x, uavcan.primitive.String_1_0):
            self._string = x
        else:
            raise ValueError(f'string: expected uavcan.primitive.String_1_0 got {type(x).__name__}')
        self._empty = None
        self._unstructured = None
        self._bit = None
        self._integer64 = None
        self._integer32 = None
        self._integer16 = None
        self._integer8 = None
        self._natural64 = None
        self._natural32 = None
        self._natural16 = None
        self._natural8 = None
        self._real64 = None
        self._real32 = None
        self._real16 = None

    @property
    def unstructured(self) -> None | uavcan.primitive.Unstructured_1_0:
        """
        uavcan.primitive.Unstructured.1.0 unstructured
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._unstructured

    @unstructured.setter
    def unstructured(self, x: uavcan.primitive.Unstructured_1_0) -> None:
        if isinstance(x, uavcan.primitive.Unstructured_1_0):
            self._unstructured = x
        else:
            raise ValueError(f'unstructured: expected uavcan.primitive.Unstructured_1_0 got {type(x).__name__}')
        self._empty = None
        self._string = None
        self._bit = None
        self._integer64 = None
        self._integer32 = None
        self._integer16 = None
        self._integer8 = None
        self._natural64 = None
        self._natural32 = None
        self._natural16 = None
        self._natural8 = None
        self._real64 = None
        self._real32 = None
        self._real16 = None

    @property
    def bit(self) -> None | uavcan.primitive.array.Bit_1_0:
        """
        uavcan.primitive.array.Bit.1.0 bit
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._bit

    @bit.setter
    def bit(self, x: uavcan.primitive.array.Bit_1_0) -> None:
        if isinstance(x, uavcan.primitive.array.Bit_1_0):
            self._bit = x
        else:
            raise ValueError(f'bit: expected uavcan.primitive.array.Bit_1_0 got {type(x).__name__}')
        self._empty = None
        self._string = None
        self._unstructured = None
        self._integer64 = None
        self._integer32 = None
        self._integer16 = None
        self._integer8 = None
        self._natural64 = None
        self._natural32 = None
        self._natural16 = None
        self._natural8 = None
        self._real64 = None
        self._real32 = None
        self._real16 = None

    @property
    def integer64(self) -> None | uavcan.primitive.array.Integer64_1_0:
        """
        uavcan.primitive.array.Integer64.1.0 integer64
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._integer64

    @integer64.setter
    def integer64(self, x: uavcan.primitive.array.Integer64_1_0) -> None:
        if isinstance(x, uavcan.primitive.array.Integer64_1_0):
            self._integer64 = x
        else:
            raise ValueError(f'integer64: expected uavcan.primitive.array.Integer64_1_0 got {type(x).__name__}')
        self._empty = None
        self._string = None
        self._unstructured = None
        self._bit = None
        self._integer32 = None
        self._integer16 = None
        self._integer8 = None
        self._natural64 = None
        self._natural32 = None
        self._natural16 = None
        self._natural8 = None
        self._real64 = None
        self._real32 = None
        self._real16 = None

    @property
    def integer32(self) -> None | uavcan.primitive.array.Integer32_1_0:
        """
        uavcan.primitive.array.Integer32.1.0 integer32
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._integer32

    @integer32.setter
    def integer32(self, x: uavcan.primitive.array.Integer32_1_0) -> None:
        if isinstance(x, uavcan.primitive.array.Integer32_1_0):
            self._integer32 = x
        else:
            raise ValueError(f'integer32: expected uavcan.primitive.array.Integer32_1_0 got {type(x).__name__}')
        self._empty = None
        self._string = None
        self._unstructured = None
        self._bit = None
        self._integer64 = None
        self._integer16 = None
        self._integer8 = None
        self._natural64 = None
        self._natural32 = None
        self._natural16 = None
        self._natural8 = None
        self._real64 = None
        self._real32 = None
        self._real16 = None

    @property
    def integer16(self) -> None | uavcan.primitive.array.Integer16_1_0:
        """
        uavcan.primitive.array.Integer16.1.0 integer16
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._integer16

    @integer16.setter
    def integer16(self, x: uavcan.primitive.array.Integer16_1_0) -> None:
        if isinstance(x, uavcan.primitive.array.Integer16_1_0):
            self._integer16 = x
        else:
            raise ValueError(f'integer16: expected uavcan.primitive.array.Integer16_1_0 got {type(x).__name__}')
        self._empty = None
        self._string = None
        self._unstructured = None
        self._bit = None
        self._integer64 = None
        self._integer32 = None
        self._integer8 = None
        self._natural64 = None
        self._natural32 = None
        self._natural16 = None
        self._natural8 = None
        self._real64 = None
        self._real32 = None
        self._real16 = None

    @property
    def integer8(self) -> None | uavcan.primitive.array.Integer8_1_0:
        """
        uavcan.primitive.array.Integer8.1.0 integer8
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._integer8

    @integer8.setter
    def integer8(self, x: uavcan.primitive.array.Integer8_1_0) -> None:
        if isinstance(x, uavcan.primitive.array.Integer8_1_0):
            self._integer8 = x
        else:
            raise ValueError(f'integer8: expected uavcan.primitive.array.Integer8_1_0 got {type(x).__name__}')
        self._empty = None
        self._string = None
        self._unstructured = None
        self._bit = None
        self._integer64 = None
        self._integer32 = None
        self._integer16 = None
        self._natural64 = None
        self._natural32 = None
        self._natural16 = None
        self._natural8 = None
        self._real64 = None
        self._real32 = None
        self._real16 = None

    @property
    def natural64(self) -> None | uavcan.primitive.array.Natural64_1_0:
        """
        uavcan.primitive.array.Natural64.1.0 natural64
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._natural64

    @natural64.setter
    def natural64(self, x: uavcan.primitive.array.Natural64_1_0) -> None:
        if isinstance(x, uavcan.primitive.array.Natural64_1_0):
            self._natural64 = x
        else:
            raise ValueError(f'natural64: expected uavcan.primitive.array.Natural64_1_0 got {type(x).__name__}')
        self._empty = None
        self._string = None
        self._unstructured = None
        self._bit = None
        self._integer64 = None
        self._integer32 = None
        self._integer16 = None
        self._integer8 = None
        self._natural32 = None
        self._natural16 = None
        self._natural8 = None
        self._real64 = None
        self._real32 = None
        self._real16 = None

    @property
    def natural32(self) -> None | uavcan.primitive.array.Natural32_1_0:
        """
        uavcan.primitive.array.Natural32.1.0 natural32
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._natural32

    @natural32.setter
    def natural32(self, x: uavcan.primitive.array.Natural32_1_0) -> None:
        if isinstance(x, uavcan.primitive.array.Natural32_1_0):
            self._natural32 = x
        else:
            raise ValueError(f'natural32: expected uavcan.primitive.array.Natural32_1_0 got {type(x).__name__}')
        self._empty = None
        self._string = None
        self._unstructured = None
        self._bit = None
        self._integer64 = None
        self._integer32 = None
        self._integer16 = None
        self._integer8 = None
        self._natural64 = None
        self._natural16 = None
        self._natural8 = None
        self._real64 = None
        self._real32 = None
        self._real16 = None

    @property
    def natural16(self) -> None | uavcan.primitive.array.Natural16_1_0:
        """
        uavcan.primitive.array.Natural16.1.0 natural16
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._natural16

    @natural16.setter
    def natural16(self, x: uavcan.primitive.array.Natural16_1_0) -> None:
        if isinstance(x, uavcan.primitive.array.Natural16_1_0):
            self._natural16 = x
        else:
            raise ValueError(f'natural16: expected uavcan.primitive.array.Natural16_1_0 got {type(x).__name__}')
        self._empty = None
        self._string = None
        self._unstructured = None
        self._bit = None
        self._integer64 = None
        self._integer32 = None
        self._integer16 = None
        self._integer8 = None
        self._natural64 = None
        self._natural32 = None
        self._natural8 = None
        self._real64 = None
        self._real32 = None
        self._real16 = None

    @property
    def natural8(self) -> None | uavcan.primitive.array.Natural8_1_0:
        """
        uavcan.primitive.array.Natural8.1.0 natural8
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._natural8

    @natural8.setter
    def natural8(self, x: uavcan.primitive.array.Natural8_1_0) -> None:
        if isinstance(x, uavcan.primitive.array.Natural8_1_0):
            self._natural8 = x
        else:
            raise ValueError(f'natural8: expected uavcan.primitive.array.Natural8_1_0 got {type(x).__name__}')
        self._empty = None
        self._string = None
        self._unstructured = None
        self._bit = None
        self._integer64 = None
        self._integer32 = None
        self._integer16 = None
        self._integer8 = None
        self._natural64 = None
        self._natural32 = None
        self._natural16 = None
        self._real64 = None
        self._real32 = None
        self._real16 = None

    @property
    def real64(self) -> None | uavcan.primitive.array.Real64_1_0:
        """
        uavcan.primitive.array.Real64.1.0 real64
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._real64

    @real64.setter
    def real64(self, x: uavcan.primitive.array.Real64_1_0) -> None:
        if isinstance(x, uavcan.primitive.array.Real64_1_0):
            self._real64 = x
        else:
            raise ValueError(f'real64: expected uavcan.primitive.array.Real64_1_0 got {type(x).__name__}')
        self._empty = None
        self._string = None
        self._unstructured = None
        self._bit = None
        self._integer64 = None
        self._integer32 = None
        self._integer16 = None
        self._integer8 = None
        self._natural64 = None
        self._natural32 = None
        self._natural16 = None
        self._natural8 = None
        self._real32 = None
        self._real16 = None

    @property
    def real32(self) -> None | uavcan.primitive.array.Real32_1_0:
        """
        uavcan.primitive.array.Real32.1.0 real32
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._real32

    @real32.setter
    def real32(self, x: uavcan.primitive.array.Real32_1_0) -> None:
        if isinstance(x, uavcan.primitive.array.Real32_1_0):
            self._real32 = x
        else:
            raise ValueError(f'real32: expected uavcan.primitive.array.Real32_1_0 got {type(x).__name__}')
        self._empty = None
        self._string = None
        self._unstructured = None
        self._bit = None
        self._integer64 = None
        self._integer32 = None
        self._integer16 = None
        self._integer8 = None
        self._natural64 = None
        self._natural32 = None
        self._natural16 = None
        self._natural8 = None
        self._real64 = None
        self._real16 = None

    @property
    def real16(self) -> None | uavcan.primitive.array.Real16_1_0:
        """
        uavcan.primitive.array.Real16.1.0 real16
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._real16

    @real16.setter
    def real16(self, x: uavcan.primitive.array.Real16_1_0) -> None:
        if isinstance(x, uavcan.primitive.array.Real16_1_0):
            self._real16 = x
        else:
            raise ValueError(f'real16: expected uavcan.primitive.array.Real16_1_0 got {type(x).__name__}')
        self._empty = None
        self._string = None
        self._unstructured = None
        self._bit = None
        self._integer64 = None
        self._integer32 = None
        self._integer16 = None
        self._integer8 = None
        self._natural64 = None
        self._natural32 = None
        self._natural16 = None
        self._natural8 = None
        self._real64 = None
        self._real32 = None

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: _Issue110_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        if self.empty is not None:  # Union tag 0
            _ser_.add_aligned_u8(0)
            _ser_.pad_to_alignment(8)
            self.empty._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        elif self.string is not None:  # Union tag 1
            _ser_.add_aligned_u8(1)
            _ser_.pad_to_alignment(8)
            self.string._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        elif self.unstructured is not None:  # Union tag 2
            _ser_.add_aligned_u8(2)
            _ser_.pad_to_alignment(8)
            self.unstructured._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        elif self.bit is not None:  # Union tag 3
            _ser_.add_aligned_u8(3)
            _ser_.pad_to_alignment(8)
            self.bit._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        elif self.integer64 is not None:  # Union tag 4
            _ser_.add_aligned_u8(4)
            _ser_.pad_to_alignment(8)
            self.integer64._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        elif self.integer32 is not None:  # Union tag 5
            _ser_.add_aligned_u8(5)
            _ser_.pad_to_alignment(8)
            self.integer32._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        elif self.integer16 is not None:  # Union tag 6
            _ser_.add_aligned_u8(6)
            _ser_.pad_to_alignment(8)
            self.integer16._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        elif self.integer8 is not None:  # Union tag 7
            _ser_.add_aligned_u8(7)
            _ser_.pad_to_alignment(8)
            self.integer8._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        elif self.natural64 is not None:  # Union tag 8
            _ser_.add_aligned_u8(8)
            _ser_.pad_to_alignment(8)
            self.natural64._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        elif self.natural32 is not None:  # Union tag 9
            _ser_.add_aligned_u8(9)
            _ser_.pad_to_alignment(8)
            self.natural32._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        elif self.natural16 is not None:  # Union tag 10
            _ser_.add_aligned_u8(10)
            _ser_.pad_to_alignment(8)
            self.natural16._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        elif self.natural8 is not None:  # Union tag 11
            _ser_.add_aligned_u8(11)
            _ser_.pad_to_alignment(8)
            self.natural8._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        elif self.real64 is not None:  # Union tag 12
            _ser_.add_aligned_u8(12)
            _ser_.pad_to_alignment(8)
            self.real64._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        elif self.real32 is not None:  # Union tag 13
            _ser_.add_aligned_u8(13)
            _ser_.pad_to_alignment(8)
            self.real32._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        elif self.real16 is not None:  # Union tag 14
            _ser_.add_aligned_u8(14)
            _ser_.pad_to_alignment(8)
            self.real16._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        else:
            raise RuntimeError('Malformed union uavcan.register.Value.1.0')
        _ser_.pad_to_alignment(8)
        assert 8 <= (_ser_.current_bit_length - _base_offset_) <= 2072, \
            'Bad serialization of uavcan.register.Value.1.0'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: _Issue110_) -> Value_1_0:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        _tag0_ = _des_.fetch_aligned_u8()
        if _tag0_ == 0:
            _des_.pad_to_alignment(8)
            _uni0_ = uavcan.primitive.Empty_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = Value_1_0(empty=_uni0_)
        elif _tag0_ == 1:
            _des_.pad_to_alignment(8)
            _uni1_ = uavcan.primitive.String_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = Value_1_0(string=_uni1_)
        elif _tag0_ == 2:
            _des_.pad_to_alignment(8)
            _uni2_ = uavcan.primitive.Unstructured_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = Value_1_0(unstructured=_uni2_)
        elif _tag0_ == 3:
            _des_.pad_to_alignment(8)
            _uni3_ = uavcan.primitive.array.Bit_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = Value_1_0(bit=_uni3_)
        elif _tag0_ == 4:
            _des_.pad_to_alignment(8)
            _uni4_ = uavcan.primitive.array.Integer64_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = Value_1_0(integer64=_uni4_)
        elif _tag0_ == 5:
            _des_.pad_to_alignment(8)
            _uni5_ = uavcan.primitive.array.Integer32_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = Value_1_0(integer32=_uni5_)
        elif _tag0_ == 6:
            _des_.pad_to_alignment(8)
            _uni6_ = uavcan.primitive.array.Integer16_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = Value_1_0(integer16=_uni6_)
        elif _tag0_ == 7:
            _des_.pad_to_alignment(8)
            _uni7_ = uavcan.primitive.array.Integer8_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = Value_1_0(integer8=_uni7_)
        elif _tag0_ == 8:
            _des_.pad_to_alignment(8)
            _uni8_ = uavcan.primitive.array.Natural64_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = Value_1_0(natural64=_uni8_)
        elif _tag0_ == 9:
            _des_.pad_to_alignment(8)
            _uni9_ = uavcan.primitive.array.Natural32_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = Value_1_0(natural32=_uni9_)
        elif _tag0_ == 10:
            _des_.pad_to_alignment(8)
            _uni10_ = uavcan.primitive.array.Natural16_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = Value_1_0(natural16=_uni10_)
        elif _tag0_ == 11:
            _des_.pad_to_alignment(8)
            _uni11_ = uavcan.primitive.array.Natural8_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = Value_1_0(natural8=_uni11_)
        elif _tag0_ == 12:
            _des_.pad_to_alignment(8)
            _uni12_ = uavcan.primitive.array.Real64_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = Value_1_0(real64=_uni12_)
        elif _tag0_ == 13:
            _des_.pad_to_alignment(8)
            _uni13_ = uavcan.primitive.array.Real32_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = Value_1_0(real32=_uni13_)
        elif _tag0_ == 14:
            _des_.pad_to_alignment(8)
            _uni14_ = uavcan.primitive.array.Real16_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = Value_1_0(real16=_uni14_)
        else:
            raise _des_.FormatError(f'uavcan.register.Value.1.0: Union tag value {_tag0_} is invalid')
        _des_.pad_to_alignment(8)
        assert 8 <= (_des_.consumed_bit_length - _base_offset_) <= 2072, \
            'Bad deserialization of uavcan.register.Value.1.0'
        assert isinstance(self, Value_1_0)
        return self

    def __repr__(self) -> str:
        _o_0_ = '(MALFORMED UNION)'
        if self.empty is not None:
            _o_0_ = 'empty=%s' % self.empty
        if self.string is not None:
            _o_0_ = 'string=%s' % self.string
        if self.unstructured is not None:
            _o_0_ = 'unstructured=%s' % self.unstructured
        if self.bit is not None:
            _o_0_ = 'bit=%s' % self.bit
        if self.integer64 is not None:
            _o_0_ = 'integer64=%s' % self.integer64
        if self.integer32 is not None:
            _o_0_ = 'integer32=%s' % self.integer32
        if self.integer16 is not None:
            _o_0_ = 'integer16=%s' % self.integer16
        if self.integer8 is not None:
            _o_0_ = 'integer8=%s' % self.integer8
        if self.natural64 is not None:
            _o_0_ = 'natural64=%s' % self.natural64
        if self.natural32 is not None:
            _o_0_ = 'natural32=%s' % self.natural32
        if self.natural16 is not None:
            _o_0_ = 'natural16=%s' % self.natural16
        if self.natural8 is not None:
            _o_0_ = 'natural8=%s' % self.natural8
        if self.real64 is not None:
            _o_0_ = 'real64=%s' % self.real64
        if self.real32 is not None:
            _o_0_ = 'real32=%s' % self.real32
        if self.real16 is not None:
            _o_0_ = 'real16=%s' % self.real16
        return f'uavcan.register.Value.1.0({_o_0_})'

    _EXTENT_BYTES_ = 259

    _MODEL_: _pydsdl_.UnionType = _restore_constant_(
        'ABzY8=q@;80{`t@30z!P^`3Xv=}wnes;wQn(k%f($fS#<t*x}zuVOcGsevRkLre$)sYLBx>Pi(AEmd5q)D^8u+~Xd1+~XeixZ@so'
        '-2eByW#$dc3<DV;%k59|VCKDh&pq$H%e&t>-}wf_J&A;up#O$W@7}(lcf;o8YkNC-I@>pQKBax#=8olS*Kgg@y|uTquVZBBh?~1Q'
        'w|3pMy}M)N?veBE9JynpW=O8>YTshNTehwJ_Vw*u%X>ODcJ}sl^en%nee*W^d2;RT9X-AFvXM+;NZ%6veD{d)OyW5sca97lwYI&l'
        'ucvd}w!V(uky~wxMeN9)H8Lcx>Fn6NA!oypYd5s_wXf|X!)!0d+}PK%ZGGRio{l_IGjiwwp^@D^om)ElI&be-e)X2_zU?C!ojD>h'
        'D0B3!BSR;~j9R;Hdoad3$k+`X-8~)a+xt2;jNCPJ?AqHp`#UzQ?cUncx3+V`$n`_VukGEst!I6Q{bF;++V1wg%*c?Y!{*L))`2b7'
        'll?99>D|_DZ-pJp&32f*BSXh*X@6pG=avmU?dvmJZ@0g9Z(qN?JJY`Tq75BewvG%vsC(PG&7JGlTK{g_Ox@?kY_C?qz-$lMp^Xe3'
        '>kn>u-SXPy<j|46ksD}anf6|5SWib+A9?up&h;I3Bx3D`t?NgI5+nAfb(?LA=R|j5U1#6g%^h7E`!e?QzUjY@3>|%CXWt|I-*2?P'
        'hRz=1Yqxff45f-S(z|`jx~+CN)*jg5*?Zh)r^O??J9^stw)W)itXjK1(`j#YCOvdqOZ$cmon0GeoRqnYzP*0i=FROr+oykPTe#hy'
        'h%XwcF^S>cb#_8_2Mvvw<hFHoxLZ2AMofZ!Xz!;V^x7?3H&`E2+r|s7Gb}vv@F>Eg438>2>hPEhk4J>ZBg5lS;qmD3cuaUaHas2|'
        '9;?FR@!|1=@OWZ)JSjXb3y%*7k0*!6>hO3<czj@Zd{B5iH9Vdc9v>VYPY;i&@c5AMct&_UGd!LZ9?uSs=Y+>|!(&Z&JTE++A096V'
        'j~9l=i^Ajb@VFv8)`rKr@K_%nSBA%i@VF{GHipO5;V~T^*M!H5!{a64@zU^kS$KSCc)UD3HU-CRc5UhC?{4q%SFP}~b-nAht+T6%'
        '><AW*6+_E!YTuZuP0@e$ao&*X+nVa3b)wfkWU2P9)V8h-9k+FM*>8f$XfLk{C+~@wW!dHF<QdD8UCC&sPG6sLSKD==@M_u9)4qLV'
        '=;T}4?WgvW;0e8gKFwdhk6GKXxnm102LAF{Z1s&TD<|G;y|K{_=Gv~lj*T5X`RyGQd)Dm}X8pImy|<4ZDZ4h`H}rs(s3E#+`BnBi'
        '&{y^kLgLx9KAp6-x39fxLwnDLcteBsNj<{0)ZM<m)4Ci9Z|H<*LAj0o7=(-e>q5W0(NtyLlzFr9sLjk<?d6%eOoRVrW_9M`*ut^w'
        's;ynLoOcymfv8hjfb42Xf15H_1x;K-Goi|^CV5Srd_#NJ#*Q00x;y$hi!EnQ^j8^czr7;fSaR5(RM(nB<~k&j8B=`mu@iw!Ux4T{'
        '!;Od*BKw<&7Nh7pBaNEAFvY(!+FB7VRCK-lBpEGO)6X+Um?NV_%>E{#g{;td<|uP?w7^B}+E0&;7Q15Cm}AVb(LzX;96#&X<~Vy('
        '!lg3all`VDS~_RD-W+dEh?ZA-R?>b`6)m&nTx(7=Cq>KgbQ|oqCq+wixow$c<^j=iZqKTUmh`z?Z%#JV(Vu`qHrX?(qdyIEZP%P)'
        '9vJ;OiTq{1t&aY*%%?r`AaiQ;C#jgd_N-H*KUeeZ!<=Rw9Q~;y-;&i2+3yz3=_VEZ!8EB-_EYa?R-`}k5OYTKN7?=syAR~0vn$qz'
        'In$gK{jo1SGJF0Rbndwo?c1Df&WT<w?5E*9JFnt>m~%}{^wLt!IPDcR(aTMx?J(z=^P?9g|K6Tu+pLM---{NkUvq)EFnT#F*AMop'
        '3!@jgg|f+9WR^!SiT*sO31&jwg7<1xnA+%dbS@sTSJp<auM2ITsWbJ_D{|h9xzM&<8_k+ki)M>iX&Rze^tt-XUfmGA)-RT=W|e7-'
        'wh-CbRZH`0&7#|3R-1IReVLE%YzygV+q2kqn>FU*XscCl9yZuM(li$@TQd91CFas-`!`?z+Ey-&wvJ0R26LHtXtZsO&sn<r&C#b#'
        '`JcDuf8OkW(-M4_$$i&0{ae#IZ2D(@p9#<Cj?Nj3pEFSSEYm-1MuYR{j6wUYeciR!)Y!Aq_R3~^ZmYdMW3RC1j?X-I)Sf+7?EIa@'
        '&mXr}>?m~2#O&AXv{&t#e%+q(ubZ$}?v7tOIrnS#*sJ$O*H6v=`bpcuKHCP8Uf77;pU%0Rsd!7((^|4kQ)8&|=GR_L$@Xk_)Fe{g'
        '+*(b~p;c=FHH=!XytbR?-L^H0nn#mYx`);Z^<Yh<PSD~N?kBS#{aEvZuF&Sid+T46-t3^LLv(x8=U}W)3@lK$c4RYq9xd3jH7M*H'
        '!wcL0c-j41Q$rIlR%t7C?w1vI5TPO1vH!MARNNLjywDu%nvX?$7R4ev@X#piF3+yXC9})AByJk^7O-yWz_ZSJEHn`N$i{7%7x*?J'
        '!H^J0C?t|5i6lc(U`isXOckmassyT(sYW$JwLrDPlr|}(7*YZ$Wol5vP$N*IOf6~|Y6WVQNh8gW7Dy}8geHb2fhJ{|(ag{+(5y@g'
        'S{PacT9j!;D?_V5t1@k9V`vj-QznB9Lq;H@OgFk2x&^wG=|?|9zd*mTt{q?)5ExL_w}T9W0)xsrcbH*VU|3o2jxvl2j4JEiF@`aL'
        'F=hQb&M+=8uB?N1FzgW6p{$2@GVB!CsjQ24G3*l9rL2!97$yWJly&lMhTQ_YmG$x-hCKp%l-Y~D40{FkD(m7&hDm`*WqrJlVV}T0'
        'W$(fi!<6->qKS~;NJu0!O@$;!(mGkwWT@h(lBm)&9jZC1C8{+|h!jUkBBg0c)Ns^D)M%O%wH&n)wVI|ynj<Zd)-*AiIGQAyG);|W'
        'j%JBwO_QUAqeY@c)AVTNXq9NyG(Fll+9cXE&5jI5Mk1qWesptmOLS|RKm8p268+lFVhnH$NDOE@k1@zGC^4w*OvW(Bu*9&oa~Y!?'
        'qY|Uq&Ss2pj7f}XJD)MmF)lH#?Tp3_jvW#^w4Kw~$+1&nr?#^iyEt}9?9z5#V}fHsVnW-Qjolo(C3b5&x3Py~ierz&9&P6~_Hyi%'
        '*sJaA#w5q2#H6<K8~Zr+N$k`1NgUp`uA`TN8&#R>P<1c`H<AQuyWqwm1UISzKe*t=0t7dz?5DnWD;nHL%?6k(KyV|Ke;*Fn;6^GJ'
        'kUDIF8#Ly#Y|AzI_xG?4ZjeuEqM6`=8`FXt`7_1^H|84L2v!*aPODsSV?Tl$!Cxg8+*pj@Ms7un2RG=`ru@%agU_47IX*ME5ricY'
        '_M7Os{NP6PeW~C^6xv9H=Ol{+H|UH(|J&Jv8~NwX9^5E=e(B&w>1&DyH_E%NaByR8*Uk)X4EXnA&|Y0N|KNrXE9dMO_3uXMcKY*L'
        'nu>xOQA>mrCkd$W=G$IP(e?=U4Tm~gaAQWR={dAIOK@XG+s*T8n{e5%`RT!p89lUCsE296jT!x97Nj4-PW`Up!HuaXxRINKew3l&'
        'y~TjgsVKM+!JrB1a<JlqoCy$5MZt|+&x2mPa{^#zor<$T`6c@wFQflaFW-cD1vg4sv2(wym~(KWq%9K_x225WMoEkIEQ&=1gBvC7'
        'np`rwD14ALZEs=grt+=x7ZM6>3@)8@`N55;Ft`y9Z6K+TOh&N{7RELds*)7ppx}ld<Pb|4-ax<oAEO|LC>-9Putpf+aN&(ZHM|kT'
        'Hl}#_;f;t96wrGzD>Aj)*0pC&y<=q4bG$?%^YY%zgYU|metjmDIkP5nR_5%?Ihk`aHJS4==MNnhaD4J<dYR>SWmXJ5?~2sTH(isy'
        'sH1EB)(ssSQoa6}sjauA`a1gimLGXzXV?0UR9~he`lhot$2+p;xA&&nQyaE-wQuQMpYj<&bnUwBeI30QraJrR^scRasjh9CH(%7('
        '(X*wqi-?8GQ;+C;Vn?c_y?1^4=CI}EBZc`hmuG)^Z>E{}bO&RQ$1zx3kjDjiT#&~Fc@`(gLr|#;^0**R`9YrCjB!Dp`2=~$cP_}|'
        'f;<OnkS8BZND`iq1rw5X|0|1v2}_A2M7fd<NpMI)F(hHi%Lfy54opzJVeyX@L#I-Gk-DJ1$W7N=lukv60O0_|s)?L7qngOgUA<9d'
        'qzxr%ie&B$e;SL`(@19Cl(|2sr13T?U-9;7wKm>WqRPh3;G+-CQbFUB;ZL7&<uM$%;L2mT@))i>hAWTZ%44|l7_K~qE05vIV>ocZ'
        'mB(=9F<f~JS02Na$8hB_TzL#v9>bN#aOE*vc?=izapf^wc?_31>4F<BbJAr_y7Cw<bJ7JjTzL#v9>Zl$y39#e9>bN#aOE*vc??$`'
        '!<ENy<uP1&3|Ah*mB(=9F<f}#fGLmhZk9-F`k|Ldl&FxgEY4dgR43!oD@bBDcTQ^k*3Fwc){_Qntl&k*@{P+cO!c%sIkm2{tG#D?'
        's&h;G#*SGlTWp%73LdVwg$vQR5RD7bxDbsC(YWFkE=1#sTe#vDE=1!(G_JUX!vP!)F!$mXM{mokMX_S&Tq<!<@0Yl^!EVv>w)64*'
        'da-I351di$!Y_Ea{L0S0@=9IYH+0mMTeoiRXz#jddw0jk-6PrZ7G6;L;;x|dMRI{lUnHlMzVK!*ePPcj06qjuT~P=kyAYNFBJ!8Z'
        'Sz(D8i)&c`MZqPxY{;VMf<7kzqvW53IfEOs{*jp%+)>t_u6ctYW&dH^uM!<|`t!TrV9K2T*jEH*nb#{u#Q>Rkzu;7~T*!XCW>vh*'
        '$bP@{El44fioA+07<^Q*7v%*la#GRP`2~lnD!%zxl%gsNvSnH{SZu*Ie2ZGdWkI*Ciw?{!_$GWwO35q=w6J8r;GzL1OIprmQQ@H_'
        '2P_vI3_Bo7?JNldc))<DO9p@*P$htt&<1mPw&c)~T49>Z73NBFm3f%C+FWBEo-KHEKv`v)&9&w_W6UEA%=PAxro}wU++c1rH<_Ew'
        'E#}eLQcMSx)uz=v#yr+M&OF}SYMx-$nl{sJ)|vHYgXu80nT^>3Qis&2OvZGYP3DPav)N+0%vRHFo@9DVujw<}%<bmM*^*d?)u>Is'
        '*>0X<o@$<E?lAvno^A%ro#q+lndVvM+2%Rsx!D3>&MPsmm_c)wd7gQ`88R<0FElSQ!{){2CFX83V(u|7H80DSLUUf5gV)TcdAWIo'
        'd8K)kx!1hfyvB@~`^;<2>&)xT8_XNco3aJtoL4L8RWokhY~Et-H*Ym>GjBKVFgwgU&AZII&3nvy&HK#zvnBVO*B8<2W~cdp`Jnlb'
        '`LOwj`KbAr*=0U%K4Cs-K4m^_K4U(cEokWO$^mp&%!K)z`Mmjp`J(xf`Lg+n*=@dRzGl8|zG1#;zGc3hEhXvh+Cg;J%pUU{^Ih{j'
        '^L_IJ^F#9^v)BCC{KWj!{LK8^{KEV)Tj0~()kEm6no093^K0`P^IP*f^Lz6Lv(Nm|{K@>;{Kfp${LTD5SCZA;_QUA5n<?`T^H1|H'
        '^KbJX^I!8nO6l@EFb~{=@E|=X58BJs*>%&yO^+GVgR=jQ@NlGuqdXk#;TR9cdN|IbOu*wkoZ#U^4<~t8=HUSzPWEzTmfdu6(`mn_'
        '6D66R;^BcF9^~Ov52tx}u!qw<N;rLphci5!>ESF7XL~ru!?|9r9=Dr*Zu%|y^rPJ8^E{mI;Q|jAdbr5Lat|v!%7d=+Q14--hXxO;'
        'JT!V(?d3|myXoqt>j6JqDTRNHhl@R2;^9&cmw9-ohs!-m=fA?kl^(A0@GuWod$`8K!@ZoofScZKdLMGro0u!tdbrMm@$d)_@Nm6{'
        'M|#9!d6b76JlyEvCJ#4zxW&Vxy_^h&dmP;3aM(W%MDTiyhsSz&oQKDIxYffGJgoJI?A7jJorm=vHhAdpaGQsXUQXA=JwER7agWa&'
        'A0OgPc6!+4;fWqLd)VTk%fnWWIFwKF(Bq-kL!XCj9&Y#WWG^Ra<Q_NoxVgt|fgd-bFK_qo6c11J@H7v1c=$gLPp9I1xYNTkJUr9G'
        'vphW8!*e`5*URaCxyREzp6>BHz#dPkI&hbV=XrR(hanFy@bE$pFQU4dc(I3<c(~ich=+STywt<Xyqt`ldz{_l>>lTX{Bfq@A}{yw'
        '3J<UJ@G1}YdU&;m*H8gn+~?u79$x3+^&Z~f;f)^N<mL1$-Q({bfA{zwW{*GB9D1{dw|KbU!&^PP&BNP0yn||M<DDMf<>B2P-s9oD'
        '9^U8S{a#LD)-4xqxp2#cTP{j27gW0J10Fu;;X@ui?BOFGKI-9PRHh#v_wWf1pY-r451;n%84sWJa(dBjd2!2&TVCAqQqkpwDkgr;'
        '!{<GG!NV6le96O?J$!`}Lhw}&U-R&F58v?cO%LDl@NF+A6YrKIw;Z|U$Sp@px*Snq*Y9}vu7~e=_`Zi9c=(}*ANf*7Klbnw4?p$r'
        'GY>!a@Cy&W^dhMxw|u$f%Pn7S`8vp!FDh33D-XZ+@EZ@m_3%3nzxVJ5ziRa#J^abTpFRA=!(To8&BNcluvEKS?%Z<cmOHoH9qP*+'
        ')$jj@hkttbmxq6Q_>YJGdibA5QWYKpW8e&eK{6-?%}A}{2!<mWj$$~P;TVQv8IEJ5UU59b2@EGPoW!t<;Q<UMGg7iRh2en=4`Mi#'
        ';WUN^Gn~#y)Z!rwXE2<}a2CVa4CgSM%ShqkJcjcbE?~Hj;Ub3R3@aGPUDPquGpuB2U|7Y_$grA`_Qe{8iy1CqxRl{ChKDj-&PWL3'
        '3Wh5gu3~r?!_^GeFg%=*D#o=8*D)A|M=*fldWJ_blE`=z!wn2KGTg*)Gs7(mk7lHo@fe23GCYpq@eH>zJb_^?Bk_!OhII_<88$F<'
        'Fx<wlk&%){C&MO&Co*hi*uv1ou$7Ul#*-L&7<w7{7`8Fo&hTVL0vp>Ip2F}{hNm&y!SH_!PiG{!aVNtw7@o=SEQV(@Jcr@AjMO*o'
        'Vt5|I^BIO1Ucm4|h8Ho?;dn8_OBn8E7-6`F;iU{OW2DRRa)wthyprKn4EHj;n&CB!L^|$ccrC;07+%lt28K5>yor%w$D0}6!f-#s'
        'TN&QQ@OFlGFp}?hC&RlK-p%kHhW9eOkKz4{v^+k*@Ii(TF?^WeBMcv9_!uK$kB>8ag5i@4pJMnl!)F*i%Sh$pa}1wn_yWTh8NS5u'
        'WrnXXlKl88!`B$T&hQO}Z!&y~;oFS#Kfc58U54*5e4pV53_oP}5hF2>A2a-f;in8gWB574FBpEwNEzf;48Lah4a094e#h{8hCeWp'
        '3Hc+#pBVnk@E3-^GW?C<?~F7<{=x81hJP{qo8dnU|7G|eBmEGMgK=;U!67*mhvuXuas<bb97k~+&2bFJu^h*7(iJ(L;{=WqIZonO'
        '#_<4-lR0UOoWk)yjt6m^%5fUUgE>y;q&M;qjx#vU<T#7tY>sm{&gG;%avsO|92an0$Z-+Ja*h?8bV%wr>N!?&G;plqXyjPUNt0v^'
        '$Hg3%a9ql98OK98F6X3Aas|hg99MBXjN@vKYd9XxNvq^qj_WuK$0InvaXrT)Iq8->isJ^38#!*`xS8V?jz@FSFnJ8eV>uqj@pz6~'
        'IiA3=mXn@IJI6YX^&A^GIyi3Q*vLuSq?2P4#}hd=b8O-0;@HYb=j2HoJsiCpeH`03Zs&M1C(V=X98ckRD#z0}?%?=8j;C|dKe?0R'
        '863~#coxUAIiADuTuxdjcX2$A<M|vz953K_A;*h2>7u-t<0Tw-bBu7@!|_s%mvPcac{#@`I9|!|Dvo<OUd{0uPI@W#alDq}bsVqf'
        'cmu~9Io`xcJLSzBZ{fI~<E<QT<9IvAJ2>g6yp!Wy9Pj3M5662s-pBENPMRto;P@cNhd4gW@ez)Xa(s-FzRJfrKEd%xj!$uXn&UGZ'
        'pXH>r@;Q#rb9{m0iyU9#_%g>=IO(o@mE&t1U+4G+$2U2?#qn)U8Z6)8_%6ryIKI#E1CAeZ{D_kn%a1vJ!tqm%pK<)0;};yi<ij;2'
        '&GIXbUvvD1<F_2Y<M=(tA2?~W{E_2N9DnBc3&&qM{>JflPU0^A;P@xUzc~KQ@gI)=a{P~zQjsUX1h{|@kOE3T3z954Lf}Y&qXdo?'
        'I7Z-Df#U?p79B5eg20IaCkZSQc!0pkg5-=(5qO}$g9J_$I8ETe0;dboG<t}@83JbtoF#C!z&Qfv3KBRvPvCrk3j{6{xJY2RzzRWX'
        'M|A@A0xJa?1Xc+&3al0+eY8g4Vu4EpE)}>;;GqJS3(`TlLf}e)s{|e<aJ9fS0uL7?igc~Obpl4<5dsjnUf_{}6p|h#aD%{&0yhcV'
        'EO3j!qXo$&Jx1WM0*@1TyuhsjPY_ruNIR)rV4c8vfeiv30=Efl6eOh7DX>Z4i2|Diwg_|yY!#%c^dx~EfnI?=fo%e}3p`n%Utqhy'
        'Qv{wW@HBxt1pZIp>4Nl@?i6^2z%vD&CGc#4=LkGkkoeMF0?!k8zQB;c3j|&$@FIa>ffozBMBr|L5rKOIUMlc1L9$FQ7kGuhD+OL9'
        'aIe6t1zsaaqv<|@*9yE&;PnD;5O|}&n*<3qy;<Nb0{08NRp4y`Zx?unAoZqq3cO3;-2(3sc(1_w1l})5%IO0F9~AhIz=s7sBJfdx'
        'j|tLs`nbR+1U@P7DS=N5d`952f<&G^C-8ZJF9>{5;7bBu7Wj%F#iy?dd`;l%0^bn$roguZzAZ@p={o}775JXO_XU0+@I!$g3DSc4'
        'vA|CRek$-Yfu9TfLg1HzgrR;V@N0qJ2>e#ycLKi`_=6yos6Pt)N#M@{e-Zerz~2P^E=V%!9|Hdr_?N)H1^y%OUxEJ#l8^Evm;{#)'
        '5>i4*Xh~91M@Sqgag@Z-630j!D{-78S*hbCPLMcJ;v|V>5)Y6#S(3!mDH0Eqc#y=Y5~oQ#SmJa^a#IhHI78x0iL)fmmN-Y^TuIVX'
        '=SiF|ae>5z5*JA<mslZ5hN@1YUSg$0gTyL{Mv2vuB&pU&Tr6>k#HA9KNjy~Ia!K-3S4dnbah1fwB(9dYM&jX;q^ho!xK6@IJVF8z'
        '*GoK7l5EwZByNznQQ{_vn<Z|Mc(f!5tH($@R^o9IkC(Vr;t3LKCCOQ}ORSSvFR?+QL*h1xjgq9TIwdwqJW*n^#1@GziLH`kuAU^('
        'Bhf3-C$UZ9c8MoTlDyh3@f3-tN<2;C4vGJhc)BF{t2-s0A@NL!XGuI;;yDt}l_Z6Am&EfVo-Z*Z@dAk#O1wytEY^!9ULtX~#E8T_'
        '5-*i_nIws<mrJ}t;*}DwlDJpm)e^6fB$suc#A_v9C-HiTH%Pou;!TpIv)(N67K!^M-YW4niMLC<Lz0ZvJ0;#F@otItNW53#eG>1N'
        'B&qcQi4RJANaDj1ACdT|#K$DbYkgee6B3`4_>{z_B|anZSxHh`pOg5!#1|yKDDfqUFH3wylI+%3CB7!{b%}3Cd{g3E65p02!Sx-9'
        '?@D}6;`<Umkocj*k0fbv{aE5B5<ivrnZ(Z}ej)KoNxEFWlK8d6ZzO&z@jHp%OZ-8SK-V87{v`2diN8qvRpM_Ff0rah{|||OO8iUW'
        '-xB|k_^-tOBx%%n3QU132nDI26tpi~cZ9-`3P&j%t#FLOu?oj260bX6;RJ;f6;4uErtkoTlNG8JPEmNE!h;k}RX9!I!3w7<q!b>a'
        'aE8K}3TG*tt#FRQxe7H3=P8`8aDl>w3KuCXS6HD?t5By<udq^~L1C3bqrz&1w89#Nixn<WxK!aXg@-C!uF#}#g~F8zS1CM9;cA6z'
        '6dtb7tZ=QubqYq|5eiVaUg41nEeelPxIy7Yg_{&^R=7ps(F&~!k5PE6!s8SkuW+lv6BO1ev?;VJtW#L8utA|i;WmYh3K@k?g-r@i'
        'RM@PrMWIV!t0GCgCn@wO^eXfzY*V;h;mM@4hwTbaQFyAt(-iJd_&<fGD-0;ysqhSiXDU2P;n@n$QFyK*<-NNUo~Q79g&~C(D7;YN'
        'MI^_E7c0C(;ckTyg?kiUs_-&}QH7T)yh7oX3a?VQSK-wPuTdCNxKH7=3a?Xmy}}z5-l*^<g>i*9E4)SFeucLxyiMWl3hz+Zq3}+H'
        'cPYGE;XMlPRd}Dm`xSO7d_duY3LjGVu);?aKC19Bg<T3CSNMd&Clx-W@M(q5D1267Lg8}?pI7*T!WR|3r0`{huPE$R_^QI!6uz$T'
        '4TWzid`scm3VRg3qwrmY?<ss=;RgyoRQQp?UWFek{6yiW3O`f$xxz0LeyK32@GFI1EBr>`w+g>g_`Sj(6!t0nQQ=Pte^&U5!e15s'
        'rto(~dV&8?_@~0Z6#lL7ABF!a{7;c~pr^q!xQ5V>8cIWJ(h)pD<4BF8G>+CdM&nqG<1}ds9<OnN#)%pyX)M!tfX2z1^aW4Rc%a6E'
        'G)~nxP2<5Dr)$z0e2B&w8fR*prE#{#IU46`(j7cc<9v+^G%nP*NMpIi3QZb>bsF^=D>WK4R%tY9tk$GQxJKh*jY~8x)woRKp&FNK'
        '(k8q@<4TRIG#;jLwZ=6X57(qqc&)~D8b;$08qm02<B^&)3m>I%gT{>-H)-6gaf`;IHR%^VM&q#>kJEU(#;qDp&{(TU%dlNzoyK~N'
        '4H_L9w`pwDq-)rzu}R~J8k;q?Xmn|8)ueIwB#j=8UX4DDZ5p?0JXw?8;dYIuXgpQpX&QHE{GZ0tHEAE-sqqYrXKFl4<JlU|(Ri*V'
        '9mKmdo~QAAjUkN}XuMG4MVd4bU##&Gjk`5QH15%Osm9AR=_9^e;}sgO)OeM~y&A99c#S5l#QQW}tMNLG*K52%<Bb|`(xjXCW{tOK'
        '+^_LgjkjsMUE>{^G!);d@h**bYrIF}y&CV+c)un+#SdtFP~$@yAJ+JY#z!?irb%1z;~JmP_@u_CG(N5I8I8|s(pmhR#^*J@pz%eG'
        'FKK*P<15;}x$oBas>atezOL~Njc;mvOXJ&`6d1pw@m-DYX?$Pf2O2-r_>m?l#vg0^MB}F#KhyZR#xFE}sY#acR~o<8_>IPIHGZe@'
        'dyPM6(r5gm#-B9)tnn9(ziRwV<L@Neh<|AOQ{!J6|JL}A#(y>br;$hwZ(G;VOTvUznd?yHgb5FFVZwV72`@qaIfX)}Q0Np2okF2g'
        'D0B*iPNC2#6gq`Mr%>n=3Y|isQz&!_g-)T+DHJ+|LZ?vZ6bfAeuu~{>3WZLg(52`*g+ixL=<bSBD0Czvr%>pqV@{#a-FBx?=%$BL'
        'D0I`wDHOWt=cb=iD0I`+O;@K-=%%-u-cF&=Jr3@1a0-R)@o|rjD}Ch@3f<%89yg~@=pIk^c)G{aDHOWL**(tgadrxY?(uhzzkB?h'
        'LZMqO+;ZWT3#U-%mKV3YxaGwyFHWJ*Ek|xSa?6p^ym1PJZuxS{ms`G^WLIH@Lbsf`<;*Q-ZaH%bgie9bDG)jZLZ?9J6bKIh1;V-N'
        '4-VHj1wyAl=oAQ@0-;kNbP9w{fzT-sIt4<fK<E?*7hi#JuKI)a&3)k&2;n8clHf^*BxDjQ37teTi6fFYGKr&-I68@Ak~lVr<C3T%'
        '#lqfo+ty{|ki5Np^R|wW%!*9ywsq~9Q|}nr^b?*)Y&y#R)0=tlU76Fb&!jSE)@07goSiu*b8e<4b6)2BA=%#3)4qLV=;$ju`<B-&'
        'uU)>Ocf;n9zL6V7GRyDEtQfkYzP2HqTG!dvo4O!XS4TgkHg|Mw?915S8~k6p+c#|J?An;RELC6I*btm+e_mxT+uqmFJCdo(G@N(m'
        '$Q>h@)tQU^A8Im}WiF3?+H|tDFw<<3+e#}h7SdfTs<_DL=i*w6v#KlF>+L7WvNRQw)K{4biebC<)1&94nV6ijE@G@F`%Trn#1Do2'
        '{%E>(p7Ms%Y_Q*+v|mDoNwQ@><p~SeWY4IshzMcmFZ*qE#iRv`*lW)^wW8vI*0*GJg+%~UrR=BP7eL}K6~7PUr3Dh}D>*WI{uy-c'
        '0?P2EqI<T$0(xbP(_T@tD6)8TZ_l!A*2M4cB8l3S=?8n&g^Mavm-7AL&xA#ml$(P`?3J}kA`lm!F&EmlYol4SM3QcE^qIZ7VM)c='
        'qS;kT^J|Hv)8^qj+d}$)5I`$54;ySBX_|`%h)mf${cBsf^nel?i_KYk_k#o?3a}>xfoyh{m1GoEnUaL9CGB5Pil$cyLe#2~rkY~t'
        ')q-%eDQ!{|IZp|sl&PU$d5u7gGPM*RuNA0OCQTvnv_M*!CW?YL2{b9wOo8uafo5e|DAwH~(4tH$g|}M;T9s*|h<2Mmn=%;+VrK+0'
        '%5+oQx?7-InSKgY_Y3qZGeFVl0f7N!1}PvtC@`qZFvXyU1%{OwrLgm;z^F1~6loq47*l4Pg3IFq<I3!yc=8T`9m?#a5b{oeoyzQ@'
        'sPQg=UCK;Qpm;)HLYdtZ8{RFjTbVr+4&EcMN14480p2UHSD8r)`c4W=DzlH`y!!<9DKkZ(-6=uvPQs&bZbA~Ilk_Nro0J6ORCyG('
        't&#-YRC^Svt(FAWq&y1GrX)c$H6DdzYb3!kwH}3GYb8N3X^%p$X-V))lSkp!CP|P>vqvG;W=Swhi$`JA7D>=bt4E>KR!MM5n@8c('
        'Hc1dl#-osFMiOk&?NOMtTM|^#?@?&9UlKer;88eqKoTS}=urrCP!bF>>`~ZrSQ7Lx>QSh3R1(}V=23WaOcKN~?omi{ToSCY!=o_f'
        '4oOhPPLD#DJ0-yvyF3b4?veyqOn4NcoR9=l?Di-uxmyx6vB#rO<P;}3dXJ{`lf9fE=)Ia!P9{0Q&XbzbO!jetn)hi;c{w<M+im!W'
        '-M^oBQ~So$$`t))clfDbw{Op=3b)@UW|oCN$)VJ?_S@IDcP;Pk>D<!U*Li!#a{u(@*LL-FZ0zW1Y#7Pt%n|kpPdsPj&XLT~w~oY`'
        'xi|c2EOXz`@i%sE?CRJMUU$>>?v9bWN5b#lXqqx_%G{rM>!7vbZ6=j@d**f7uafqwcLiS+1PyiuAARUn``cB)&)3i+pB(O87d!2f'
        ';ZL8j&0m&xV$-nipKDDbbDdoX9L|uBGdPsNUQ<Q)!=VfdfifHb_(HC?N@EN0(aapn%+@P`Dddlc`aI6RYUX%O^RF)#M~KD}wHuA('
        'MBkpE)yPLttNV)^%r+Cs#|X}{J=f&lrz}Pg&AMdFV^JTukwyKSk?rHW{l)@<85oQ*=sV}rWqCdg#uxM)yaC7e`&Bgm>vC=8?o;41'
        '8qG4_np1pxqI*Q`1-=U2rx#);KmD#vf0AZk7!C1z7VVB|bN6jkd`?ckYq_T?vNM{A;r+_(pewNZjz8b=aps<}+`P<<vAi91)OIxU'
        'qd6a~7E#NQ|DwInLhO(OOX4#$SW5z1f;$;Jd)c|^kJ7he4!d2NIl+^7M0Sli-nV#Jcu#Yy7WH?o-&d{esnPEG4yavgwDZi0OgGtn'
        'X$7L0oTmHSn*VvT{k+9~>wlNYeb?rHSL0vT;`^&LD@z>zJ`-Nw9i1~6oipH{MQ6~NbOxPi`!TJiKPziHV80!--`JNP-y*W4$)4Y0'
        '&uX*RcGJ1zGtV8hXO9&-e`oRY$L$q63SBcX`!zf5RlBBNx2OE;ChV2F<JV5k{n|bD>b=qRQ}e%m(zdYAwh@V_*{$*%+v(41X)3F?'
        'm2Js3O^w;jwtsI+wKk)znxbvlZX)yScD>{%r=l^YOIbEbErzXG3vJhaqeb18)iw#5t18+Ap$2I$vJOq2KXD2;uC=&%`HkA9sKu}~'
        'Yn?TP3`C1(2OG88pRLCqZ*ivItbK9gg66C-(Qwh`<y_c52NxDL(6&mAhYe@4WtjaYF%V9Y*<2XT6+%+_JsPeZE7^!{k6bxAt<7XK'
        'YlchvGVa9uw)?XcEMtxO4juG4UZaKFTFRw?vDw0SGh2<B9JrSH2-}~<v)TGt*;d2nj?k>}tV?(J?6IA3$6}WkdbW^T_e^Uw&#AHY'
        '1E*5UxmE)svD^1<zGElLa%|S<Sfin5Cw!XPp2)wEYp3Su+5+vy%nsaZdx;pJ*@i<XmjF?pH!|R3jRSrL<$#|@HlTBjhnVaxMwlVN'
        'Zh{ctCO==a$<LZ=qTHe3ZR<LE2^mUeu0!%*LWYv`{<y%%kjp;_{Os~i76utgRu~yd&9*NnBlDybb~7CrO67Y$h78SYJwBGgIL-bc'
        'Ltc?S^Su}Cu%=@wIb<l6%L+QLFv^u1%S;62)NHE}PE)yzlG$cLVPuHLlS3H_Wsis%_+3@ZUs3zHaYcQczhB6Zmql@sd1zbEa~v0n'
        '`!m>k$1_2a_RN|*WGId{<?d48FB(k_y~|-ul|_bTKEKoN)^r>%KYt^B&o1=uT7Le9=VJ)D**N`<<s*6LWYH%YV_k*vGU78c{%prb'
        'ntQ%-_*XWP9U?=)^A_y=XCgznwxc;8&Gra$idv4M<dsE+$d16vffe!D8LT0J9l?DJu&=-l!l<G=h+v&8jSPAAjA+&d&tMLBju6e@'
        'j-HvFwbb7Vzpu2pq=Lv$1+wUx!oP1mGSrlJmvhKa?(^mx_7fsQ^rGCB{WgmmWs#x$?+YVC0d_PHJF74<6r3?=hW!n8X=Et>+}V+#'
        '!snMphDu*k92qL_y28lN+^(I849)NQX~@t3ZFUm2m1NoN6hVe^EfIJyOvx_M7H_uJrXxcE43UU{h@h<y;h=4DWMOIRrXpm>H)t@w'
        'nSx-1-(U%sH5V9YNmzq6^O1qAMUbIVgPmqxF?b+qGem|8x0uS?&F5g3Y0dQ$h!JyP{~TOc8WIXohX@%WH`4As5jCEg&4tu-e;&v%'
        '4H?QJ0zsRE2n<?_%kX7rYF@JuG8CAX2QN@2(O4mW7WQS#;;9H3D%9%eG}lreq1Cf^HbRE-of<eGeELFUXlKl^1c}6b8`?P?87kz~'
        'n5}v37X(|f-i;hPS&n0KrWV9)$hp`X^Y2uI43+QNl6X)A7VeFZAxbS9)G;3f>3x(X=jXIF`yAkAp9$IQ^TCo-*CK{y1-W_?j8e%a'
        '{A{&BKR0lY(gRC!tWJ=L#HLF`DUQ{qpYcRu=!9$*RRNk+rgk=x)Wb!LB;_C~2T?hQ%0W~PqB;a2D&cSClMbRfh#;y`6r)28qKeX5'
        '97J`fK~&+}bodVJmwrpqYc)|IbnxyTyjeH<Z`Q%9boTvvPz0~o{%dvq8+7h1dxGWOrjO{%@d{Q9Ng^sV%#)h1vc4>8!lows7M&#<'
        'q~bh;riJApG)?0nq#O^y@eo|KgTt7I;OZQ>ItQ-K!CdMb#CZ>{!hx%B;3^!r3I~U6g@Y{9grfiPY6lV1B>KGB|0bSKkO(sdrhOY@'
        'n#8})gl9}=ngr(z6h6x_O%6DwNe~{d1k)tjQa%}>EW4)Smemw(Z)POBd@Iu>tt>_vDbM2OdAFTUASrHrYlV84mWVK8B$);2Cl>t9'
        '>#cuLdW&Tq^k;c4+0grfbUQQWp+C!pnbvb59>l`*KVEkKIf_dxrJ+Jr?A$La@@O;rZOcT(ZOJFw%-y0ri(*ls42sfrO)i;Td6^wW'
        'teZOUtg{{q4a7dOF(NBPHWFDWM^o}yOKpBF`8L0zcAL(bNtLF?7?naA<5Y5L%-2NNt4mUwvb?4yUjZT|iQP0NsoMLPqJm0eI%hc5'
        'oZ8E%7}8!&#i#ZPM}%@&CUeg+siOPlpy|UT%Ve(5bn#4+LkpTNoPBa=L({X9s1849IzOw$LDPlETMn9@J2YLG5ayuixkA(BWb`;_'
        'x-!sol2*dzh?bTp08QsUp9xJ*r@Bptre{*!W<t{uFrAnMns!vTLyhWIkY6>w_G*e!=L*o><_1ld<du~TP0wh%c{YnH15MA%`jXJ}'
        'jD9i;(hnhD{V`@%)LZ|e^p;PG8!W)y3Ia0~>~^knyeuVaA^RUMqyG|Yy9!ycbHA*ZGc;Y&mWhhnQU)|#(xN?!Vo^b8x};r`OJ)~='
        'zx^>3wUBjF2cC8L(DYQ4-(5qJd--h1K^EnE`?SeyPWPloIo%mX%*jbV<2%DKp>sx)BEmSMiv8o9q!Gq_Ip#@`&#lZ7E1LynhEMWX'
        'a=5QAIH{-{f5z8R%_ypCpG-!BsPPqIYe*-vBop(YDv{XKDa&VKuB@LI6SG%3CZ@y49Y*dja)*&SjC_79PKS{@jJ!PdsKdx-$H-?g'
        'QXNL_F!BQ%Bad@!1Bz|3@Lr6zOu4;~zjZ6T`^xT~GP+>Vn`ldxN6ig(Umk7o?EWs}@8L53Hjeb&IBm@AW-Qo(*}a_Ih1u=gxGKow'
        'B@%AP<6SjR9&cUaJb1iSaUSo$!t!_rrtx^I9FN!Wc%7culBt$gIVP`T@;WB3WAZvCuVeB$Ca+`i9&}9JDw5i9Y+lFaU0^ov3<l`p'
        'v3Uzfm6hG<LB-~s(Su|2IySFk^Da4?_Z~0dCFnm#>vgo={iF4U+Jgy&M3S;Z8L9-Tlt~eJHzkl#rWUmfwF0%uG=<`WP0F;Og`q{D'
        'MVU6D;kF61DbtN^hHimwMR{Y)*ECdi%)<=B0>jD<b&L@acud(5?qJv<utV8_?PA3C-KFe!b~Ef2*sbg^_A;XM?p4<CeGK~q_9=2{'
        '!WT$PXmVv0N0mgCCKskS@r6^GTvy9cD^aV-WlfxD!A+W6)xyyt(W1#kZJfBvZJNB&&CxB<t%>41z=@(fpee^~m}6LCSQDRlj1v=i'
        'Oq0IB4vrlXJ2cUjNrh2jm$vr-yE%4C?ADaIwwDtzdat%F$3BjI68jt-*`->!qW4ReYDE^iWGk0!<p{|x*~$@;U9y!UB)ep*gDly~'
        'u7z~h9Vyw7lFLTeV}#HHjFem^RrLTOC0Br4>qyCtl<Y{!j+E?3$%iN@nJi<Jl%7md-usk9HAA&B)u^_=X;VX~?ll56%A}DNNHe6B'
        'X%2;3o0VxrD?_V5t1=nNX3q#ph3~ijW2B!eNOzX`lCa8*Vw7Q2U{u**jx)-3A6IsCI~jHg>{ND86TWclgtBAV!>~tSkFwTJGCwU|'
        'Vagh%%oL^=IW*}j#wInzC#pHBt?`;t^{oeMI3>?px1~AK_6JSwYUY%k->k_^tsJcqt(rWO@ss#7+BysU9Q_jg+85vQ`O<@$Zq+Eq'
        'sKltI?Ei62Y5C)t1bKII?3CE4DNBEXQ|kYOw)X&gIQB^F(U{_t=T9m9l2ZDoypm+<O*)a-bdM^ZOkLMFFEaIOlp|9+gx?|j4&iqQ'
        'zeD&Po!TM%j!y09)DGcy2>;v>{=A)}@OP4G+D_7LAH$vG9Ji6Qhh&SkjpY7L^5ED;+THm~Dmd}DLn?S<F)H}!rK#ZQc`(6~F(x<?'
        'ULF;^YMxZ^sv=ZyYX7nsq;bauFUkdXJ6WgdyufVmaA)Kg;f@jR7~uyMBRpd6R=Yi|<Apn3xZ{O8h3EV%HOCKk{BXw)cl_`JkRNWQ'
        ';@N8p%@5D^wz&LozuP6`hZpaEG5O)etyp}1cyU{nO6|G0MN3NyFK*Y8)50Uuh<$zF(ZXk1R~9Wiia<<JnbkN+yxNaN2vjS|X^T<D'
        'W9e-%_ITQlPY4Q8#E9gvXhn=u9t&K==;gT>Mx1FL#xf|Z5hI<)A{#OOc`V2gqoT*+9WhpVEc6j0sK=rpF|K+nAQGdk=VBu<273@7'
        '@na=<WcGN-Bu;FPXW_+3?%6m>O+Mj09#)By-{T>cI1xS`Zi$oP<Dr*0K|UUaiIe5yA(=RFJ|3Qllj!52nmD089=3^->*FDuIMF@`'
        '=S)QrojC749@>d<@Pll@fQDa{xeiq>NzVm0W(GH^0zbIm#sUO4h=P=G$|o*W@1P*#yHvega3e~oa>0#Kl>A`ExZsAP<hz8uLp`{W'
        'TM^^I4f?bx|MRk``OVqu_J^7uoRcg;%^&o?9WINSpF6iaYW~dgXQ$>Dzos-bfA;H&Q}fHecH#BH$&OL~Zp??8pKXbd;$%R~pJ#hD'
        'McdnNYJQom?w?+Gxos0J8#Z4aHNOHqlts<2ct0hn`O|dPE8klIYJL_5O$5aJN)NI)H9yvKs8bboP5|ui!c+5S>3@-^`SZ470jT*E'
        'wWT7|`~|mYp49v$v8!xqe$Ki$HGiqBE20-33vJ{v^ph-%Z75VFDZ-IY*<Y&gMx69tFuXxwjWELD!W)Nbcq7YJDLcGTycohulZnKp'
        'kL%fsAsioZSLRg<;R`xe3*n#(vp5ck3$wT|iwm>3FpH~*;KD2iYFz{uW^r{9T$ttX4722K=aaOf&u-_Fb_XhpZs(VBFQ2Wv;P&!v'
        'FJELYKjr0b=VKKqlAYOd5@A7#)x`=@q>2=zxW2t_TTlDu#)h&gQp8G5G{wqMm{eXhisU@2Q6!60qp;2A7o%u$#VASv2@Xc^rDq+C'
        'ut23K4uB#Qx!x*WfFeGcnPZvRdL=-E{1H)~$N5*y9M5U~_2m|uh{h7N8;#^d-=3h=$VXAD`wI-rHWSJ(BvC5YGMaVCn8%_%awCiS'
        'IV0Q0dHcQD4`yI6%AoI@PnYHSG#FpdbMT5AFA7mb^S>_FX6`-(KBLhr^Q}3>w<o$s)L!7L;Dvc1w(8UG+Vm%B21wBmzh}|*r#5%r'
        'R>kM!^t+aOsv<k1nHb)$+!nb4+w1uA9Uo`z8OzPf+!)I%yAZV<&HQN2N2^8Da^$~gv$GIe;J}jj3=P(jz?R@n2G3r0Zu+D2?U+MJ'
        '1e!U)lXygSjXB=8cv*N)bE_8hcdp-8t?jANZtD)HZD~}VAX|{2$<KrffRQxa=hpnsDQB<6&wQ)S79^nW+WhZ=yw&Li3F6;p!t19O'
        'Bxo`N{#iAC#$L032Ayg9aRmtuz=8yUn8{q)DU!37YblT4UAna*`Fe%gnwHK~x)4Er5rV>&6=r@HcU!jZK+s%ODf0NV{H~T#iFgIg'
        '%Wt$)Zqih?)m%M+c#AXr7E49UHAh)H;cx?`_xzdxWx22%<?u|lBtTaFqPiRxww99*muoW_qav5`W!#DRZRZ&Lu|`9lbI5F->DE#%'
        '4UEk)@@KYMf;~N(XS3Y;Y^&jOH$5dOOh?K&mQs=e&lXQ1%e9*4)L8q45}k7CP1d{lj-4#avAH~|0@+hxzEt4f$hA{*bZwbgSur+w'
        '&~S*=66nbYOdRm>!~sdr?SLX+aX{x94{_IBjBr7M)_jz=NfO4^q_9g7Qn<?rYCE|NC%3V5avKL=YDp>Vru?*$nXSjiQW&S%KV--&'
        '(r3Q+q8-+BOl7tdlEPz|iJ+XCZ8gGaDwi@c+f10RB(|7=-&Mu@6}6umSJcP(`-Kd7SrjLkhqeVh$8n*!KZCt@aq)}kXjASk1^%MZ'
        '<j}hu)>K(!Xy)@f{ccUi@rp}RU+CYp`~(fp#}IO}arzz0NAk|eqE9r&x(X#;#Ajyw*^ZAi_k88>uWYEgBxiMI+tHklW_yG=MJ-2R'
        '@X8`XWJloTz>4_n4Azjqj^I89*jHc&VN`QTbnxsM(X0)g!5r=!A)3J*Ju^FNslOF|Uuknm1(Bf&q{%gff8Ts$s44F*=a8Y?=gm3n'
        'r-;yUh#Qq)bIwGD0_-R*v|Jb&aze`ohR|}H&AER<%hNb{c|yyxwKf-#W!ff37M8Xy%is*9bjws#F5$A~0s}1xYtUvsGO%?%>dE=$'
        '6(wbcZI;wYPUY?9(|J7ASabaZV#Hk7KL;0<hJ-@YVFsTvYCJWY3#sY;JdmL*5#w@v8Je2cY=jI2=H<Z)AsK9@KMVUZW^tCzSg6$!'
        'RLWUAJA;@Qb3pj?g~-s(m}3bNiTgIRvmD*un5}v37X(|f-i;hPS&n0KrWV9)`UC!4&c9h!U-_<`wFF_%N0hsl)ELw;9|Uy<DHG1m'
        'TWgk-L)EM>p(qn<LQ~e+AdjJ0K|bCDqja$eKO=3BiWE{NT{2mc1oep{5{XT}OO~Mso6VP+7Ypj|Nv8<wASwq@If%+ZREIW1Rhq%%'
        'AgTiqqAI0BbErX7Gx<IaqB=Ans_<<(d<UjiWcy}qU#p4cpo4e!;LW<(f3pr=rL*tXgCcmv_Ft>>-=K4E*%K_LirJN85QHRz^gKxj'
        'E9>V<LP*6)2u%x1LTH*sLP$9hf+Ha~J<P+Hgy57gof4)~!kmi|W}Nik>K8Z-Os9eAG%yca4NRwd>1ZYktb19EX0iynm-}BD`XJH0'
        'EXGJVxOFcB{>ozMUS@k+T-{5*+a=V!EZ+ZO>RuMNV)1n^i`%kPx|hW*T3X%9;&v^$?q!%dQrNnw1JAl*x|flS#8k?0lzhrko1{uT'
        'Z3=r8+H}rLDkU|>sMgUKr<zh@f=Eq!bxB@RmefQ9CqY$`5=p8xlu{T|R558x$0}O4F{;zl#;ICRo1lVCjs@jXOy-<oQbqU8LDPpx'
        'iis<*>k90a&!9T|py~XS76(liVs1HT+9?>i(z=H}G@YcCusL6yaPF#w#h~fAsTP)orXA1iP~*83Bv;L^y_%xDxdL3bxk1w<NoAE%'
        'Ei7PhWuWPKSzi*GF05Ku@qS9G7A|;i1yl>CQMZD?Oa;50D;F=z$69dJ!dd!XB-O%sTd@GDg%!1>BC3T8ZqYnd3zx*MvQ-NYEbEG>'
        '7S?EtPoqi>vMAZx=S*f3x+gtK=*}>rO-}mh-WiSwoimyw55^gl<R9mxeK0OasbEs%6DzZ<%4R`n;gdX;8BV-SOe(6kpOI9xKBK5`'
        'eKHvhqDE4={2GOERg#AJ`y&&HO{W}LJ`Hna{k&+HXCCQjm<}U%7`em99Y*djawkIPF!D;s&pC|T$<H~A{P4lZ<3!tlUz;qv7o#mx'
        'ZZG6--3sr%vb(2@E?Ds<+LGn*a)aHMM_W9*zsvZ0xQxGzBLO!~8#B8Z3$|c(FK2gQb~`t&3X*t<fg6%|*UXc|Th};O5^q(U#5=IC'
        'B;J8(B;G1V;&mimrzEyiBwo79j>hX~ypG1}XuOWb>u9`=#_MRj2N{jGibQrCmDf>u7nsUBgZ{aARNew2Wo5T|P*Hhj^x&wxj>_w('
        'ypGE2sJsU`l{XX{OeiFhlo`rUB~YbIiU_+Yfs`_}sAZ@Xs8yyZR2ytkrUfkwEdnjdv=Q~TO`uJgZgewr3v?^W6=S}Lp|WEhW*8P2'
        'R(7akjL5%Z%8qac!w!KR$_{K7BZluTWyiCdVYk3;Wrwks5si1RvWD+t*e9@0kxLW4B4R?5E2}uFB&syIFvW=@oYLgFT8>(YT1_r%'
        ';zR{*(&VZZjuwd)O)hHV#8+<9<dtrYZi#M9wB`X$wB!Lzd2PcS!xF=qILu?5*vDg<1Pyj@?2y=@iK<MpixRuEy${&Uv0Gxdrfjvn'
        'oXF67wRJi6aqN@W=P1Z7y~<U&U%K=vve+e9xdbamLUsvOj)d$ItQ-m1C0HF~308J3q`U5j$c~6yHn1KefgWH)<TB~0`$a^)$4ht#'
        '`meH#<O(or9V6K>k{u)2F_Il4`4D9!lVyxD(vwL_dY_W0W~f%C8rAkUZE7gby+)u$nKaS@X@;~i&7ov#voft{WoQ*>RVG8J>={9M'
        '@cs6GjFfW)Db6xq3|5&@j53T0j4C_KaYm``<I0Y1C&NyGoyrbs!k3JlP<AYP81@M4QP%oN=I6vKOj)CpnZgt!hbDck*rcXFMKwpY'
        'HC|JmzV%=Yr_6clwlqiD{-DWS&74y6n>D$qm7`UnRg-5jeg=O=TW6u4qhF$5`?6a;S$a^@ts3PRl^E5O`ajMoCx2X%6z@)sof11W'
        'rRYy^%KM+t_8wpl#~z728dIE-{3)MbQa=BbSCUEnz@rn1O;;aPK9jnxab8U7M;_&v)DG%*P``uv9n|lje#fPDP`~3+J1(_@`W@6i'
        'cc?#aCn@}$q?)#qwA;sUCppJ$B<&&DqHQC&zmq&Twvl#sK9dJdB<>YMig@64wZ(|wr<W#zr{~H8PsVuQNO*Zf@Tz$d!K;c8!KwYr'
        'W>Cf*6TB!B-0fqXpz{KA!NYx#<AXasxZ{H#RDAG=w_ELYw2l?-SmBNp?!=w*lhqtM+_A$QJKV9u4?uRfnTqGGEi^kk+uP!@!~JfT'
        'kR4vU|HWj77q?>Z+2O@)St@pTaf_Cg9bVk7C1;06rV$DIz+;Ecw5}|6coct_q6({Vu6VT{i4dq(l+hMrj>nSQVkGjkADs{sposCw'
        'W3h@DwLBKKh_TFb5sWzDJd9*eP$R}YkHs}&H1t@ABgRONMLS~T^jP2{##4{QKw^~jSU4ocUe85FVnp^JJmN=6@;L4BfJvO+9?!vx'
        'bKSF1l$w0rdpxKT=fKAUEO9=3JlGQF#>WFMah`lU2ovYb#{)8P{(L+*6X(*$12u78eLQFr=h(*sIB~vx5X_m1;yH2peLS!eqv8j-'
        'f&m-9DsvsGT#B9xZp;jBR0V!;!Hoq7ZV(eG;Y3edqTWHl$#;o*x!^{WQ00OfrI`7_jB&vY$IN%>dWU*&Bex>PgB$c|Q~u{=GxVFY'
        '*X<8OKR72@f}ua?e>+?jLqB(Jc?|uT=g-d2FMdsFhW_l=6=&#|f9=9cg_9kl{@s`lLqFRRA;rmnpFhv`YKpeE-wgdSTirjY@N(NG'
        'TsCaJJYs$YdMJySU-5oQ67#1?tXICb0>u0*44MdN`IR1IabkX~=TM?5?3@7D;e{vW&(i-Q5%cG5#R3rXD{4zci1`a{(L9OyOJY~q'
        '#QdCfabo^bSyx0VJQmu><L4(?7~4>&N>YR)pRm7F;f*-uzhHQS!Wv<O!-Y2v)$m4^t5SA&qj)KVYmP}IHa+R+*-IfD9}!pPRSDs#'
        'N5?859CTq8$02cH78ho5VHOu=arF>fnB_pNir~U5t}22HvmBmbmi+B}l6Lgj?R?ViKxNVG{8H}avvn8TUf%8Hi|pm6y!`EatR6+O'
        'D_ct<Do0UQtQ^H@Maog!(9yoRv7x+T6!#4san0tf?R__G@9r46dn8+aqA4s*F?8hGE$th-I{UV5=olF~;<ldl^?jXNyLv~4lGlVk'
        '+sj&4d5J{b>NTqy*Q~5t*^q9mUs<<mb#1z?VO9O=hWeGOSJthrZCJUgarK&X?dn>4Tvfj+-O#XRP2;LH={0q$8&)@_Yw4Q$#@f~C'
        '+S>Z`s+H;0jkT-NYgVmFH?FK--Po93ovvG5x2mDGfj(Wis;*&Wy1t>&Hs7$azHViGV>-RY{#uu|C#M^17xw?PD_5;ty{fKpO}eqx'
        '_EuNBYIWnPRdx00`r6fv^$n{U*3{Onsa=^~v$Eb^+)%sPc9vdMn{Kcttz5arwoSdQtY6t^&#JGlU(=ATYh0DCO|M$DW~J@5ex)6)'
        '9ikn2y1uc#wxO<}VYMB+HFl-7c6D94c1_)y`Za6P>ALz=wbu69`o_9+LtTAC+P2%69(nf24Rn9sW>R_OKa%q-|B)<G{=+t(U;U%W'
        'RsSf3+&J9ESNe6h%>vc_H~^}C<a(=g#gF)CW{zcM>y<!h@<&8{9_L>*b3CW{*Oyz}BN|K8ZZwh;eS3mdBOgVr?k^HE+e|3Ga!0A;'
        ')@arxV;+n8$c-%O=ZtJ0=j}JT63oD0ltJG)pDxSuX)wN^=U`6}ufkD9^S>_FX6`-(KBLhr^Q}3>w<o$s)L!7LV2830*vRy|HvLJO'
        'feJOm?^(3ptj*oGRq;7F{jTMns>sf0CWiMbhe=cb&xk+Y@p0y!vE01Ojj_Bs7g5{M%#Y@Lv|2<hNB)a;mkWV81eU~SXt0(9wgh)F'
        'c=ob$(;ua8#~f-<(98**#3Qn6%<;a(%ffq_TeYaabN#+*ZBLDMAALaK08u@NYz2rWKlLy`qSADqTk}7sB*_*()v!8S0fN43^S=uc'
        'g{N15h<~36ub*B4qR9;SXVv&AlFj}Zbf)dcRe(4ED?kL=F>`6BNRni(r947?>DG!QNET{qTK-t+$`AQf9|~Jmm}+0#ZP`K(L3355'
        '*!t5F>RL)=J{B}DztK|3U{l#va|ImYEza~?EcY|l9HmKx!}V3drxj@^%Z23#wP&(57_w?3)#bRbwVVXRT${-l_q&uY<4(+PJ6AFx'
        ')@Vp952@rc-CD|}fw9>V2s2wPL06y6v)N(>*;d2nZh8(_nE#b?EaiX&o-LlUmuof8sj>D8WtQdg$*gzt9XnZ;V{?gX1=7{R1hv4w'
        'k!z>s=-M*V;9~Uspy3c4CzP2HdOP3)xC4@~@&QFi?tsoU9s=FF7y+?_W%{sslO#~HNnw{FXm*zqGI#1GPTgeb)J+b+T%J<cP5F5|'
        'Gh2_3r7%vjf5?zmq|bcsMLVqNn96K9JB7zG6G1sO+iHZ<R4zwnwwW+rDRMCbzpIM*D{4PCuBeam_X`>FvM5e64{Zy2j^jdce+GN+'
        ';#woq(Wcy83j9T*$)R^Stf{id(9Gv|`rVq2;}w?#ztF#H`57^uk0In{<Mcb0kK~<`MW1Mlbrs5ViO<aVvmGC4?)l2$U)kJ%k|g1o'
        'ZAWuHn(Yzh6tx`X9aI(>B0B;v2Uf&qXRw9@b_Dk^z`g=I2&0-yW{GFdh-Pi@4CZj>2+<7g=$YABOZ~0z`%0TjDu@hKATO~g{QKr3'
        'Lrr;iIfo48K5x!pKScztL)@qYeRd`?6ktbjf$PG^kQ2B*Fa)mS^x6FrxSmFW%oDhtt+ly`Thlf<vaqyuS;}mvTwJDzbqSX>7Z_+s'
        'Sc5k6k%6uA5v$HOuP6&PY_p^+bt-Q+pUxu&$C~RW5F_To{yDg?G$a(F4l@X>QRAuETu4p#=Yb4mX-1dh%h1%kW+P-MFfR{Y2-$Zt'
        '{aM(TF^jYO(L$}3;I7W%*%?gGm;=J6FGPlR#vDtKNZhxfo#n_Z$861OzaZF>^={<Y$#NW<GqoUY(;pBPbN<cJD9d;4tTi8lKB8pF'
        'q{g6*`5-9lNU4W@qF}S6q_t*+2}P-Q6PnWe26+t43KAeE80F_p_$h#cR27m^7n8}7th1*cn@DWB_n6sPXU7HkX$3fEL$z1;x3BNp'
        'ygk*^(cRP0+tJn6zHW0zs<W%FV`E28@5QOdT~vSm`Kwl5n7Y6}-a0ZHNo~h5POjGhS`N^1fR+Qa4sAfIG{MXPS_dMaRZ1r4Py@7P'
        '(y<(%b!Y%u;k$SE#!N5N_C4IbgcA!z2XFepdw8?|9v-}SXWzyLMesuIzl7(%Z|C00Cs^*?TlIwejuk_f`2>;rl>M*lH)s1_^zu9p'
        'UdhV(vUnw%UTfdGvt));NG93z2C7UkZvPoNcV$CueY$>SLu2F0^s4%FdexeA9g#%p(kmO%4Mf?fU)9i1o8w0`Ei6BxX&OHw<@gbf'
        'AK|o74`Y6WQ$=;Es7@7iE~=<;K8CAh;q*|Q9;(wrJ#6(*od&97z$~x^YB2`PB50uQf0^)uL<6-LS?1u@Kn<uhi=}~@?QL;2Q2lO~'
        'Py@Ai|BI=CTHK1o*FY_9%Tj5e7Pn|=HBgJ&wd5M8VOC3F>!uDo>xyZhMm7?ODo3C4*;H+ksy4ML>{V#fIWwuO*chX_S7V&&i;W55'
        'TkX{)DOXv(6>+ZwRm@5xsqR!tVN6l=tT7#{Zr;YIW>*`h%292Cig!7Jmdj_Eb3RKI-8TnKA13)MuGq3Gwp>2B>+pl7^YdpMG+l^P'
        '=Adb(X6ec-ANtUAl2*dze5J~{D_9nTrst+$SsI#l6ud)?f>)6DHNW<1ic<Ot(D3F4O_$`mRZ79KfW?)8rsrjSNocyTf@Q_~DXCz&'
        ';Jp=4u$;y!3j#A0>~^j+!7Np5!4)iL>3@+FEaz>-0w`Ek)Ru}UST49l^Hi{061&P)uspD=E23aoqcJ{>#W~2L%yOU3nav)b^eB5g'
        '!-&y2>F1VbI3{$?Xp+AeXC%)s&PfMjT##zTq{!!dW(l9of^yI&c`OZ`D5aQGq`i=lq+pOyBw~<EMuVu4B%M&BFs@26MDIT?k=XS0'
        'W6NZSuB<P_5N(`2&%Lg3_3G92b&VIME{J}dohQ2YSjQ7}xVppD9j@+hb%(1v5krToS3<tf;p$Gl(BbNb53U|(0tW=(Wa0fAZL@Ow'
        'Cx5$Fc*mCAab<MD0zT0;E{`}I?ASco7TP^w#^3j4{H-4e0CL*Q*$rH<ZL|A7yK}Q!z;QK`WlU_}6+=xv%XnpZEaQT^uXzxS>l)`l'
        'G_IOSG?tC4R@FA-Xv6~xOCuhbMkB6rG-5|1b~0;AMI)xW?1;pUNbHEjj!5i?#EwYph{TRae2@`|t4M*!k%=9dc!9~pGYF`QM<y<y'
        ';8u342NjukMh}im?8wB9Ozg<Sj!b-zlZitm#)Lv5Nx7*ERRUGYq=+({5=bdii&}<Sfm&snLMg^3Wm?d}&?3;HOdFAZ+XUK_=|(q0'
        'w?Ma|Y&GU9JSscpVTNIWVP%Ip#)y7ArtAoJFzgW6q3pnRG2$5SQg%GM8FmZoR(2SB84-#1Dr@*YhJ6D26uC6v%S9$Mxw49*N}@`W'
        '3sam}$|+5*tL3PbsMX}MCQfAJCQYtt;b@U)(d42wPK@a`O<w8d=$7c#M64d*M2sHLlvy{-F)T5xiA6oeiT^yNN$p_=#}0`dn#j_m'
        'Nhz^Q+xvjs9J?iUYs#0~%ZZM?S6i23AICn4eU1d}lC@k>|D{XTB8y$RmP^-iG-#Ku<!I0@UCYs+UAopmmab*jLb~gY3hk)SWdrLm'
        '8tMT?g)WmIdjL_PD?sUWRA@(qc2sCbg?3cvLzD_lmN80ePbMjIeoCU6p<0=0RNLRQsi9=~8i5*R(nt%W8Pdu$hcdR!%Cw@Dp;e$&'
        'nGEH_X9OkF_uKz5QWF-W!pnStTxCWv$}lQ0s_Zbw8Rg55D?7TK3_AsODm$nNUq*LA*|F?l*dwq<S?ed6pIEOjWsOp13R8?6n)LN^'
        'lbYfa)g0B<cumRv)`K;i((kR?(i~~~gC=)1bIR{;*5syEj#i0QO`gg4G=Pk@&O$#&zeK<G#l?J<_MoO)HOet6F{+6_FwQBle_WG1'
        '@lKAN5<4~J`A={n4@_u#53q-0kHj90DNalQA_Yhy1x$G*Dcs+yN+dS%sxm3ub&Z86+{??5DywZslg6(-%ud~|s&dqA7Y%UH02d8#'
        '(Et|>aOCa7G8%Bt`;!U(KgZ&BEN&MTaAAS{3=8CKKZU>jRMWPfcF!4ZKj*mjq>U$Aw7n<yx1R^c-qUXBr!mlp2EJnGQlEj|P^Qkc'
        'zj+LFuKf+<wsjq}d9BI3D0BR#Z+LdM_~K2T-K1{%mi>8CouDl({km4#e^%13&sX-JcKY@G+Wzwb`t_&w56q?y(67fGY5(~-{d&n!'
        '_MhYF*NsQpe=eh6?<VSbC;j@lW9>ip(69fX%4c7oU(Y+<{_`*U>$V~r=%Hj!$HvayzK))ep<{2M4S1nF^!+zwI(t*wx;nRZrPgn?'
        'PU!6FO|@^{oa)}%+uKPV@%QejzU|!|y{X=9-Q8Pz`Z_kG)@@JqWjaz(7pd-^t$kb9Z{587$m_Rl>FDWPA6~J(y(_h@Bh}Gq&+bX}'
        'u5aJm-qV}f+LQ7L`n{L<t=zV?$6k}NhP0=8yF1o*wr{o<_I9MU-sXS5xxLT!v3z9cxV3%l8`s{}*|B-UT55k}4h;P4K7a14{PfT<'
        'H<O1R+1=68-nX@9<nEE!g_mr4A>IBDG5gPN==PsN_xozP)lZ_kd@tSL&mCd^`77PvhtM4b-OOjweSA0F(Vtc&5<wCovHPoh*dg<R'
        '>*JY;)wvJzFpAjcG~Ji~KkKr&D(DCV00'
    )
    assert isinstance(_MODEL_, _pydsdl_.UnionType)
