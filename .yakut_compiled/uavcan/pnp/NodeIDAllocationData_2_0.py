# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /Users/maksimdrachov/pycyphal-demo/public_regulated_data_types/uavcan/pnp/8165.NodeIDAllocationData.2.0.dsdl
#
# Generated at:  2022-10-01 12:13:28.021834 UTC
# Is deprecated: no
# Fixed port ID: 8165
# Full name:     uavcan.pnp.NodeIDAllocationData
# Version:       2.0
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations

from typing import Any as _Issue110_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_
import uavcan.node


def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))


# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class NodeIDAllocationData_2_0:
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    def __init__(self,
                 node_id:   None | uavcan.node.ID_1_0 = None,
                 unique_id: None | _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray  = None) -> None:
        """
        uavcan.pnp.NodeIDAllocationData.2.0
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param node_id:   uavcan.node.ID.1.0 node_id
        :param unique_id: saturated uint8[16] unique_id
        """
        self._node_id:   uavcan.node.ID_1_0
        self._unique_id: _NDArray_[_np_.uint8]

        if node_id is None:
            self.node_id = uavcan.node.ID_1_0()
        elif isinstance(node_id, uavcan.node.ID_1_0):
            self.node_id = node_id
        else:
            raise ValueError(f'node_id: expected uavcan.node.ID_1_0 '
                             f'got {type(node_id).__name__}')

        if unique_id is None:
            self.unique_id = _np_.zeros(16, _np_.uint8)
        else:
            if isinstance(unique_id, (bytes, bytearray)) and len(unique_id) == 16:
                # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                self._unique_id = _np_.frombuffer(unique_id, _np_.uint8)  # type: ignore
            elif isinstance(unique_id, _np_.ndarray) and unique_id.dtype == _np_.uint8 and unique_id.ndim == 1 and unique_id.size == 16:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._unique_id = unique_id
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                unique_id = _np_.array(unique_id, _np_.uint8).flatten()
                if not unique_id.size == 16:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'unique_id: invalid array length: not {unique_id.size} == 16')
                self._unique_id = unique_id
            assert isinstance(self._unique_id, _np_.ndarray)
            assert self._unique_id.dtype == _np_.uint8  # type: ignore
            assert self._unique_id.ndim == 1
            assert len(self._unique_id) == 16

    @property
    def node_id(self) -> uavcan.node.ID_1_0:
        """
        uavcan.node.ID.1.0 node_id
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._node_id

    @node_id.setter
    def node_id(self, x: uavcan.node.ID_1_0) -> None:
        if isinstance(x, uavcan.node.ID_1_0):
            self._node_id = x
        else:
            raise ValueError(f'node_id: expected uavcan.node.ID_1_0 got {type(x).__name__}')

    @property
    def unique_id(self) -> _NDArray_[_np_.uint8]:
        """
        saturated uint8[16] unique_id
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, x: _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray ) -> None:
        if isinstance(x, (bytes, bytearray)) and len(x) == 16:
            # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
            # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
            self._unique_id = _np_.frombuffer(x, _np_.uint8)  # type: ignore
        elif isinstance(x, _np_.ndarray) and x.dtype == _np_.uint8 and x.ndim == 1 and x.size == 16:  # type: ignore
            # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
            self._unique_id = x
        else:
            # Last resort, slow construction of a new array. New memory may be allocated.
            x = _np_.array(x, _np_.uint8).flatten()
            if not x.size == 16:  # Length cannot be checked before casting and flattening
                raise ValueError(f'unique_id: invalid array length: not {x.size} == 16')
            self._unique_id = x
        assert isinstance(self._unique_id, _np_.ndarray)
        assert self._unique_id.dtype == _np_.uint8  # type: ignore
        assert self._unique_id.ndim == 1
        assert len(self._unique_id) == 16

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: _Issue110_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        _ser_.pad_to_alignment(8)
        self.node_id._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        assert len(self.unique_id) == 16, 'self.unique_id: saturated uint8[16]'
        _ser_.add_aligned_array_of_standard_bit_length_primitives(self.unique_id)
        _ser_.pad_to_alignment(8)
        assert 144 <= (_ser_.current_bit_length - _base_offset_) <= 144, \
            'Bad serialization of uavcan.pnp.NodeIDAllocationData.2.0'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: _Issue110_) -> NodeIDAllocationData_2_0:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "node_id"
        _des_.pad_to_alignment(8)
        _f0_ = uavcan.node.ID_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f1_ holds the value of "unique_id"
        _f1_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.uint8, 16)
        assert len(_f1_) == 16, 'saturated uint8[16]'
        self = NodeIDAllocationData_2_0(
            node_id=_f0_,
            unique_id=_f1_)
        _des_.pad_to_alignment(8)
        assert 144 <= (_des_.consumed_bit_length - _base_offset_) <= 144, \
            'Bad deserialization of uavcan.pnp.NodeIDAllocationData.2.0'
        assert isinstance(self, NodeIDAllocationData_2_0)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'node_id=%s' % self.node_id,
            'unique_id=%s' % _np_.array2string(self.unique_id, separator=',', edgeitems=10, threshold=100, max_line_width=1000000),
        ])
        return f'uavcan.pnp.NodeIDAllocationData.2.0({_o_0_})'

    _FIXED_PORT_ID_ = 8165
    _EXTENT_BYTES_ = 48

    _MODEL_: _pydsdl_.DelimitedType = _restore_constant_(
        'ABzY8=q@;80{@*{TaV<%b)LOQJEEku?viEMqQ{QZBlonml59)6c9OMLvNw}mEmo^b?8uGkW_7c6*(Advr>6}VkRK9QKm!@T9l(!y'
        '^iMDlBk`kO^6ozn!2ckA%()d=WOvU>5hNA6o2)u@&Z+Z#=Tvb%J^ye2@$L@&vwSgML^etWL#qp;67zF4O7vhj&SrULO{rJQN3ZF`'
        '%-}M*v&i-8*Q@<su70uVEgu}3G}Xl_-dR5SepyuGvMO}@mIsEZnn4#YR_bW1(m|f)gPU2TuV1^GB-vP%CQGlWQmvM|!y{c-_=w$I'
        '_)xBYy*fO5xbrWoU#^x94^>$fW>l5hu0Dajw+LR}wOT&#uF*-<ND~Yr7;9Lfi17vfG7gp(MYt3M8(hD(iXVwD9-iT0<HtW)#ZSwv'
        '&utqsFHk?`2*!N!gVdU7s-x>^si(SV>*L|!$dtoGr_(ZC9X<vUjg>8jGZ=Xle|`DPE!Pn~Hh3F;yMaG}8g~A9b$hjZYG_N9MyiPX'
        'j($~*U>Xk`siXo4&JUw(yjt$8s*zeg>1k~^TCh2Ov5F7k7cEE=>AcWj1|6+FTV5Pa%(0G!c~+D|6RmD8A0OJRD#jXqNc1pQFxK({'
        'Hi;RnmJi(m2RXil-~JlrcIMll@ee>T7F=eg?pZU73N?<iBlw&z#)~{w$w8!N*=qTfyc#8DJS_CIN^tnbGVt_+Y!H|VngmRL{o3Ht'
        ';MD=DepR9#o*c%?f<T2%OSHw28SB+&@nHF1*Yw1s+J-8`XAj`X;7+W=nL0MJY8HZyOcau)LSsXizfL3QB+SyVg!?M^R3r<NPQ$WL'
        'sYP9ciCXAl5PXPF*)YlGx`3Ni8eV$s%@AY=RWer#E1gfW0=`I^=j|Z4tta?QMq}7qkIlre_tWjO3_3CCBpaalMhWQPCFg04onfM7'
        '_w#D`$PZ2V_w@OF_$Z#XJU7hp)iT`HiCxS_85jUGc>@drevGobm+L~6S>Z47acp1-#fQr;-BM8mdRe<EzJ<Tutdc|(i|((`1H0wF'
        'u6l=$o!Aj9^qf0d9qv{mnC{G^xD?<*9pl9XTn^wB*!STXd~WCD@T|1wusw5fcwRm~AfF$^_Wa4=1#Hir9PY~R4`F-Z<S@YY!IQ&>'
        'v3=m=@DaKHQEbnh9A1>?z9juUCeJ_4avwe+?UT|zCGFGFJ|pe3(mp5cm!*AP+OJ6ag0x?i_G{9<C~YY1*QMQ)_8ZcEQ`*0h_9baw'
        'mbNGDzO=7M`z>kv(jG`VkoMcszAEh{X<w7}b!p#__B+ykSK9AM`=+#SNqbq^E7E>n+8;>!*V6utw0|q@kEQ)s+F06SX@4c{Z>0UL'
        'w7-+~kJA20+CNMC7jAFto{@{^+(pk_yy-4}>@Gfb7qPoIb{D^L7r${AzjYVCa~FSf7k_dWe|8stk&6ltK_BN3I1v5hyOAAHfWLqd'
        '4FhvL`1mL1c6P2$D4fi+wQ8z4-e8!4xTex9UCgq|hCMUTgFXf%f!naq{{&&I-0#EFa4Y<ay#NltvxSaA44J2N4Lu*6-aQ1p)ap+E'
        'a)<Qq25{f%Fv>LcU52qbg74FXNTk!T?uVufZJbp}<fNykV>6BM8i<ND0K|334-d7@A)tm3TOthAWq|jW^Q?YGZe=L26vaVuKoZRn'
        'Jk@Y_aSwpQ0Fb8&#DMsnCH9IFfiNP@tY)o%7)2JF5%Q#d0D$XHFeB9g)Mm380#1ZjppG(tiz(<<`hxMDT>Y@J_+_d=G7wiCDU%@C'
        '5cm-UOKquD#1PjEH8%`D$f&e02HK~jUVugvH0q?tW*rA`s;Tlh5RHCNfqV%7>ZH)Md^nv+251@fvVxwUm;&U4Up}82Ssy?TbhJ<Y'
        '*6Dvt)<(6CG>_EpD3oT2%7K|Mu7a+{@hLM3qHLbhoWfJ*Gyv-4k-o2NA(};@7C_0~Mbg9wd=<ZHGrmWMI?*$vDNH-RA>F=oxEsG5'
        'e=F_-d0RdNG%#0VQ!W4i<7@Gc=%)DZ;u{{sK5-k!N@+F&_1WP)eDqfQAwT*L7&~@PD02Mc;ivH@@ZZn20_xcgpq>*zJ-Y=^&kCUK'
        '3ZPyPK;0EUeYgXtyB$D%NC5S$0O~~n)LjA8vjV732%tVHfVwMydQJfKIRVtCI)M6!0P3y)>Ujaw9Rbv@3ZOnOfcmTe>Qe%!j|-q)'
        '6hM7g0CiUY^#K9YvjV8E2%z=^P+t;2{iXowo&ahnfciB7)E5L$pBF%VP5|{80o11iP@m`k>O}$6M+8s<0n}Xq)CUDn&kLZQ6+qoN'
        'sp8+`#itFbJXECy;+f#eTW5E6?hp^gFL6<1ok%?h?|5PT{i`?Lkzj;jmRB{BURZTUMumQA^&?$gM~+L;s;1z!8r{|7l0zabV@Oe8'
        'Etfd*7?1=48N?2VyLvDk5EMX<FH>9?0|}qPlXD=c9O!T$5~4~|2ygvB5dcW9Jg6Ya2xpm?dpcR*(D>0pU!w(~4`M}RCWJtY7Ko~g'
        'd8~=5Q=bsolE{G>>qK?%u}02QfwESv<)}7OB?L0+lSNijg|Qw-HAMhXtT7Ng4O4`a6LSb3v<(@q5P0G~2cZD(^=p>Dp{SZl1lI}2'
        'N^k~LeTjnxZS-#8CWUwslMD=DQ^&7jy!y}hnY&*;v$GTbp^9JoEPnmQ|GXH#5r3~2zZt(3UyiTD-;aN=JeQ}CqwKwT>AT<ASQHq%'
        '=I4Cz4<Wz%_<vsq-jjw|5pg~RRwF!v%Z!2|8ApY0Q?}{gr!VOsm>x4TrWo~9oa3@e!2&QN)`&a~9=pgPUrUk&_QYvk4OEZ^qAO<U'
        '#7rwho0&>0yqC0t5J&f331dKRfaE?(IMxMf7hMi|u$osBKN+YTs02O-LTQ6Wq`cIcg64{3V&*tcpN%|0>&v7gNr4?jI!IvHB%El4'
        '1sYsdc~VWmNuz@tQrm!?o3wy-o?CHu)ai(%R2{Rcs?5N9SS7#{z?)(IDJ)}R7+Fhs;Ya9Tz<fp^RTQ9ln-0P}URdmhlk8fJyhM7o'
        '0xc*@_lH2OLb7nAOCHK`OgA+VKTF9WKuHX}{tVGvce4#XLUzx9wlViKn3j_{Ix@|n7n`9W2jTmb7}pU<;TvTZfY5s_HS>LY#FzGN'
        'rMKK?bdph_j{y9E2vKZw)4`d6;T6t-G>x$ZCtm=sH5S!JYu|?LFb3k5)UVBE;sS+Ej2f8)MhWc#SmVrIp_PqpHBEsif*v>qk6|j4'
        '3Wvk!YiOaxlmmbZWRnTRx%4PYkl~Hk?;<@m5mDF-bN~-hF{QD~Ah?+oGhRMG*HCWfPY~ykhFUKu*R+ka;aL~wpslOafN*1-6H4qg'
        '@wS_>*u6e@yH=JSuvJo$ov8=0e_f{u*ag?iGoW%{-&U*xYjX^vtgWMZPF{?c!jLG;5~@&<3!f$jxD3)eN{hk*lz~qXgAUe{Hb6nN'
        '_+A4T^&>7Za;}Av5EX8^AB0!CPCo;=n{`4ckl`XiYqtEJByPI890Xx_5dK6LnfEP)HWmki+Wqwdt5GOEVs9U8o5(_8GqJaz=fH5G'
        'A7uUTi&+%}Z&b*D<$5pmGKH>GrMJXBj}ZxyN0__e+Nv`#lE_RtS;>SvCA=;xpru33V2Ui!9aaU;35)=Sfyd2Yf)HU+A|oM$8lFBd'
        '1}euM)U*ih<JH_3cBC*rJb)AvQr|H+Du6hQmtgsl6muuWglD_OT0&VjbxB4Qa=XMZ5m-wpk?tvyGlJN}HD{s`R>Q)B2$@W?0*pF4'
        'RXffxQ6D8}iUL0VkYv2(Ah^>Yjp}ek;6zPYQQW7+v!UW)g}S!mIsRx0ZM##47>>hG;))oUr~={&mZ`xjWwXNy0n!vat+VQV=Ff}`'
        'S6&U>VqTI2)NB)o*(EFmDh%5!k15(K?r@e@CCLu!7<{%whiU9j;eNXVylaj+_AecmCyK22x@`N&n$C`lo}&|tGU!epQzRyQ^=!yX'
        'cAFhB6ng4LmB1X6<a3%5Shq(5r;sivKlGuFz3Nhn_f3;*#KeUO-=){yJV0(?c*iC*xFG-tfK=^Xiey{aph<{&oCEB2y4eHl0U&9#'
        '05~ynkPGvL!3iQ^+NWd_{5XgUK2h7G85^0lo`QD(^;_Ul-*2a5UY1j{T1;w;&+zMnul84TYJ{a=Q@R!cE3Z{+MU}S7X={Y*F0}u$'
        'Dc56Hhnp7iTqQ9E1@&~wBF~X1deyZ}fSN|`Hq4$J>%cB$$l6819;ZLJ(DX4Zpde!^jRc`ys~s8op;Ycby9UB^RU!j&H`_5J8SVqB'
        '1Z-Tw8cUG5U8@QTlC`k?PKnclDKJ=Ry|HBq&3fzcCX!nnVm}Jeh{FLuATq<W+_pyd9WS8t4%H4G4#R-NQ8m`IJTT1wri&|cLtZ)v'
        'KXCE|UX}D7E_KAEHR<-ckgx~wMs-4_uy9E(CF{v^)Z7TdhSsU)7A|=oXN70)cIg%uz=i@R<>GUQx4>DERBV(&r2+j&CHF`&6-ajU'
        '+%sG4Pn`hMwxE=Ei>O&`U75HT!K-IvvDe0Yer#(hm>iL7NgNtWeYGaCbX!X+93DFaj_%*!H~<2e&UhxRQO`D*U#|gArg~~YZ!Mh?'
        'YA2RvB%@8!EZv|Q7-g!8C=p^!C{oQvuv}ZTGt|IUvjx?RKdOs9|6k)X-JBNL+`%9tP`#f3>t$|o8YJMJ5q%TLz~H%_!o6Tz@m8KL'
        '^em&ox6tm5%69pS(~~tb$VybIA$>^}`~3jmd@TC`Z9alz1A&e)$$?1ZI3tZXsp>>{EM|wU=j;!XHkJCgbV_d6KJ+#&OwNJJOPDcq'
        'sJf<cuz`X*xAf9qM9e)e)w6p*`bbC0+6w7yU2bsr-)y7%&!Lbrt0{Q`4m#GYnidCiRYBqo#$E&+)z)^VJ(lkJwOMz3AopT*mrSX4'
        'I>ls9<QW9-5byDVzDKCg_dEMNGjmMcG1c+rC}Q(6X4$WVTrW&r;vB3kFv*zR0+T`!g%_{$ekjKg8U*j@4RY^GY0%i97Q36Hv9oB|'
        'iD_J?s1gQLt0w4S2L!jcbBA9x1A8f5O(t*-0ao#%EC+gfnMf+T3iXBs2`(*p9SK~HkX3WRrZh7Mdid;Be*~{Om$r(`_~=^h*7MYX'
        '0`$Ns_Tl$Js|cdwTyer^$^lW^>trFaoHru+xIB@d7Pi8H6Bp6O@4!`x`4jnYy*WD5TJ{x*c#ko}6^QnyPL#r&nUK)1YRCsSzz$9?'
        '1}xSoxdsn3%dj#)^hUcrIX>3RcAT~B-7+wlyf$3FyW&b^?>Qu!WvPK5VC=wE@+}sFEW%``ARAuq+Ky|280~PnkQs|Lx)GrPN)VM9'
        '61Y6-mbWvv7^~jq#IG?&$t8P3e`u4lO+kOZvw0aX8y<t7lv)_aEF0eoVXgqgoEP}QQmx*FWCxIXj@U*MmvCG&rWP^5%@jyye~!hP'
        '+PhrVLlDMngzZPS!7tY379)+h3)ZqBk1d=K{<2OmDglK+52RSDqoA|F&hegtJTHz?-Qxm>?=O^Wv>|~ajvte`7+J0FQ3V?mVsQim'
        'm_u>OdHRM-#qFhIUtH}Vdyq2ffvigpIO77Z2_$Kc>PmoxdC@Y!vYNp?T{22jww;ANs>`x?n4MtFh-XL~cS}MeDSlvNx5=el0ydJ7'
        'AvFqbW~EC2@9&#^E)%m3XC%-_imgayvPnS0;ZhBwCI|pQgtcn1gkRv+OKJ4yEr48cCE3D178hmXiYnc>>H??EIyViyBc$V`0%H|}'
        's~D`JcTf_k#ndP1iW&7IHQUBjUaFT=t_-nD+M#Iz39rnNBs$x|0dT&#PLi6{_->jfYRuVtC%Np@P&w?OhglbGL2(chXdF>xU7V!~'
        '&Q<FIJ<O5GR-G&mB=lYB!Ih|e{^HG|u1Hro>EEwQH+d@ZN2&DgU3F>5L8B`m60`%0iJlbnyhrQm110ROdd%jWs-8=yz=yGSOH}2I'
        '3aH%N?P4~MQDJ{(N={-psSQU8R&_hw)|&DB&c+#lrWEAJX}O-Hw~Jz2!8SE1@HTZZlHnS46oQ6}vpLf0#TpB)kNR}zEY1}lqUr?R'
        '*>G_xscuO31oG2^MtuSR7~&FQH+7ZVKdwcTftH>4kmozj>UPj}jjZ_Mt^v_`W0K^SzkhB>^hP!GQ|i#DCVZTegD+B;t<gtpCVLKb'
        '#%FAn@R;azoG>_2$fvg&)ok%5^a5TJb@EPzXf)T_=#V;6C-WiWU>Z$@fT9NdO?fa5=uMleC3R4>G#UxyG_FoDCOataFV|EFkCfY7'
        'jW<SU3R$s25&`SeDicAxEfT7&GM$<Ng46=E^(6%%-!FO_3+^2+>6*H$7b5qbU8@w(PI;ucS-P$2l3U7Mvj??)ym}|I7n^nNJ~e!F'
        'R{Ujgj?j;P1Jo$)i}%-2GhAfV%NQ7{0*|dExVRM6%<2q+)BKV4w2vYSjlrIrR)f<$VbTi9?bvfgyh)Y)`$N6+yx{XgJ-XE?aKu(>'
        'w$hl-aY(~eS#J_|#@cuY#bcy_lu@OShOaIZ>pRX@e0TAmIAxcb-K@Ry3}y)`KFNbDus&+jsL5b{lpUFfw&H<-2-}(JR2Pt?zz=He'
        '{MJT&8E@ZWOTl^#{Qy|orP@Ab)Q~@7WOgT0HXJMUw<ka|RK&pZ3pfJq&~%m@s?Y|f=#FQIGr)Id!uC;EaRS?ok5q#JhiY*H@{?xU'
        '#dnjwmy_`>3fiNUW#w7U@3J(peeD!oXLF-Ioz`^eokiWy;o3PY-ktGQrMKg+Nu`Z0K#_r<&7{BydMd=V(X(3L?*$d1)h<xcdtu)B'
        'fUcFSJJNER`$-t$({^@K)R($>9h2W}?T+|J0=Yayh$Ewt%X}`W&{XSULamxys@&`*4NKkXCCDIM0m46`(K@l*1Rr`GD5Xej@kkTz'
        '({6)nJa|JTI|lnXo_(VH5Ln)RACl@u4oU$b^b(`(HN4a1$@n{F4+}XQ80}w?-<zr=o+2pqbkRkBP2HDSP;bVf8u&o^d}Hy*9jNxj'
        'lTrXxAo<{ZA!pI}(1KHj@&P=6>^+8{W3ZAVN0{7kF)Vc9jlg<R4oL+b1e+}C4cDaU6{uxi71K^By&(bJQ}ePh<&5a~LB}OJ=3GD3'
        'uVF>tu9s1ubvmOZYe7!Fg>eO}{{VrRjPBLlU6hcCwESG_j-S^^?#F%)+#JJ3fwv@qbU?{}QOyf-?u9u?qO2v3lH!XP=I7XZV5<ql'
        '2*W&sPDil7cmU<boe%tO-7&tm6J@bt@b=Z44Vy(fC%BI<FM!r$9ciZFbAU&e_5%hebx)3Jz%U^W1O5O(ZVZOQ<Yq(GEoYK3DVIp9'
        'u<l&ot0p!^7F!=9z;ko1=nzoH$g;n8Fj|!QfC^<UWMW+V5yLE=YNK@p(IT7Su{nGxB=u5$e^usKuZ_aq9rqfJck)dLbwNRqBKfN*'
        ')g@Sbunr@jJy#iBIpEeMHQ8qy>mubd8SR%($mI<#qe6GRH8&7Ecxj5jec8{#svd1Kk2SA3c^QXQD9IJq|HzUPg*>gb^CYFD`s6Bu'
        'GwVs#F|d@n;KF(faK8%G)N(z+UpbwUTU|w2hf%c4Ft${DfU!h+nv1Z4MtqEl3Suk_aVlIX&Mb{o&C$vQfpl{yTnvnl<@h$u*yO5)'
        'cGM%j--C<-H4Zj#MOK#_Qh`u=%!`b~x!x$lazTRbCrKPQt-s(PL{undXC@F9Z9h=b>AX2piDyxGZ)>b7TbI}IWg=wAxvM}C^C3Z8'
        'EE{J@!pA!usN-_N!gZ7^M4@%m$0yPKL}-1?HBc(ca@JV$Sa)`!@6H@`HoBWVxHjelwT&<w@d876kt!8@QXb#$p{?Y0?5^`r0j5Ft'
        'zDul|(I^>`*|-S@xN`VREO6>so&i<?hk&R<XNBk#kkd({CBY%7nT~V{I1FYQQ{g5uokeWYnB9tqHpJKZY>8~l6f>L>DEz&&t*)05'
        '=p*f*gC1glV2zh?kyX>UvuP)9SkT@b)%b41Rd{s}zK7L8kdEGTLLo0xk>FC7m*XJ@0wC)|c2nna+G}eM;G0@(>f562J7BoN1?6sF'
        '0O_2m2ep7dBmu#%jO5J{Ut2xa61T^Zm&NSo7%=Qf6vt?^zhy$BB2y8*z~6N=*NNz3EqRaxwdVKAieW5EPDML@4I`xb*@isIvBdg~'
        '#@4Itn_jQPmu5D+T{&<=Hs`{4NVh|@{av8`rUPg9fB(nX@@=wZTXl}UeDvdYZoh*&B^2Mhtf=*VjjOl1WPH=>HEw#R{d4u^HTZvT'
        '(;2yD=dHcuYOU;V@itp#x!vM9^#YTVV9ikqN%SynF}VFA$9b@q*So#&j#7P`OcrGBUcy+{s)+N(AbjT-cd@<w1jzmB18Y(am9rWf'
        'O9S)nNlk)^rmSCf7ngOfk+!VeP7>A<5Zn%N8`^`_<`*Mx*H`|_l25-4d`MwRvFUwDeBl!Rt^xQz{wa}-z1@s|dU%H3o_s9+1pfOO'
        'jQjhW@Wp>?i{GBWw<pcFKgGXhu=X{-V;4UhKN3HNe@dhmKNJ7q3%nzB_XW7&?pNV|^(#<!L-@43Fx1BgLaQ5}o>@LKjN~u06vG(u'
        '3TV17n}+er@&4f%{39at%IQX3-hBnSrVn=y;0nd{UndPuVB)@#pS_Jt^|aSg9~|D}KkM-7wpUYk;!j`-s4(}6sU^*^l0*3Q-#7e<'
        '4-ftiUC+2J#zp`D'
    )
    assert isinstance(_MODEL_, _pydsdl_.DelimitedType)
