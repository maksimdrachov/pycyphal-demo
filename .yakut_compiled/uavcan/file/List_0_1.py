# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /Users/maksimdrachov/pycyphal-demo/public_regulated_data_types/uavcan/file/406.List.0.1.dsdl
#
# Generated at:  2022-10-01 12:13:28.162060 UTC
# Is deprecated: yes
# Fixed port ID: 406
# Full name:     uavcan.file.List
# Version:       0.1
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations

from typing import Any as _Issue110_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_
import warnings as _warnings_
import uavcan.file


def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))


# noinspection PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class List_0_1:
    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Request:
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        def __init__(self,
                     entry_index:    None | int | _np_.uint32 = None,
                     directory_path: None | uavcan.file.Path_1_0 = None) -> None:
            """
            uavcan.file.List.Request.0.1
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param entry_index:    saturated uint32 entry_index
            :param directory_path: uavcan.file.Path.1.0 directory_path
            """
            _warnings_.warn('Data type uavcan.file.List.Request.0.1 is deprecated', DeprecationWarning)

            self._entry_index:    int
            self._directory_path: uavcan.file.Path_1_0

            self.entry_index = entry_index if entry_index is not None else 0  # type: ignore

            if directory_path is None:
                self.directory_path = uavcan.file.Path_1_0()
            elif isinstance(directory_path, uavcan.file.Path_1_0):
                self.directory_path = directory_path
            else:
                raise ValueError(f'directory_path: expected uavcan.file.Path_1_0 '
                                 f'got {type(directory_path).__name__}')

        @property
        def entry_index(self) -> int:
            """
            saturated uint32 entry_index
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._entry_index

        @entry_index.setter
        def entry_index(self, x: int | _np_.uint32) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 4294967295:
                self._entry_index = x
            else:
                raise ValueError(f'entry_index: value {x} is not in [0, 4294967295]')

        @property
        def directory_path(self) -> uavcan.file.Path_1_0:
            """
            uavcan.file.Path.1.0 directory_path
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._directory_path

        @directory_path.setter
        def directory_path(self, x: uavcan.file.Path_1_0) -> None:
            if isinstance(x, uavcan.file.Path_1_0):
                self._directory_path = x
            else:
                raise ValueError(f'directory_path: expected uavcan.file.Path_1_0 got {type(x).__name__}')

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: _Issue110_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.add_aligned_u32(max(min(self.entry_index, 4294967295), 0))
            _ser_.skip_bits(32)
            _ser_.pad_to_alignment(8)
            self.directory_path._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            assert 72 <= (_ser_.current_bit_length - _base_offset_) <= 968, \
                'Bad serialization of uavcan.file.List.Request.0.1'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: _Issue110_) -> List_0_1.Request:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f0_ holds the value of "entry_index"
            _f0_ = _des_.fetch_aligned_u32()
            # Temporary _f1_ holds the value of ""
            _des_.skip_bits(32)
            # Temporary _f2_ holds the value of "directory_path"
            _des_.pad_to_alignment(8)
            _f2_ = uavcan.file.Path_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = List_0_1.Request(
                entry_index=_f0_,
                directory_path=_f2_)
            _des_.pad_to_alignment(8)
            assert 72 <= (_des_.consumed_bit_length - _base_offset_) <= 968, \
                'Bad deserialization of uavcan.file.List.Request.0.1'
            assert isinstance(self, List_0_1.Request)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'entry_index=%s' % self.entry_index,
                'directory_path=%s' % self.directory_path,
            ])
            return f'uavcan.file.List.Request.0.1({_o_0_})'

        _FIXED_PORT_ID_ = 406
        _EXTENT_BYTES_ = 300

        _MODEL_: _pydsdl_.DelimitedType = _restore_constant_(
            'ABzY8=q@;80{^90ZEqb%6}GXP*f%e2Fiis$?KD7QBYW#a5ukjkNgG;j>=?%hkq~U>?w;!zWp`(p+4c2BAW{jCkyfH2TciSQ`M?Jx'
            'qzWPNANW~3XLj$4V_P5*DY?5dbIzQ3&U2nQo2T<1-MTd6|5UH%!`Q`15IVA2Ci-WxmrxK!Ce4l01=ZDsw<*yn9^>6%PW7{T<%9Yc'
            '^>TG4)LBNhRx{Ow2Zb%8qO^2$$qQj7Q@FTN%Kb=YL0`l7J?)BMhkja;E9z<?+$Za_$=J`?NA2^ox;xXI{Z0KrU7ZVMQCQt83v%_3'
            ';q;V<$E)h<g}a)PcoIe@jAbFif@3?)JhyyCy^j@34>PCtGK$~J3fd!k^i1c%o-V?Kvb{ppT><BjbVZn&m}>Rq>hku;5t{{fFt^E5'
            'e4=01J9YJ?&=oR^rH!W@9hN=Ssm@VW*dcI@>7cIW!`MW1HB)15sXD(c<5*{VN6)6NR9`vyK>J3=fcFu8rVpTA>k5ax)OB^Oy0Sws'
            '+NW6bjTQZpGbl<&0dM*8Xa{w+ed<&%O($|&B5-wHUF^<wXE;~t67n;#t6n`NQ`X91UA^*1ViY6yJOmp&dKBslAtjUolO}cQ)z<TC'
            '-39f!`kMMWP^%V!e=Z|k4C`)QeX#{J>@!R!+P%@8<wP{r^I<P>b#-kN=_Dlxx_JJ*uFii~7frkm@Y+UN&4nhfD{-0=H%xmb(a7b}'
            'CZz^A6d?KioUAO2ovx@zX(U(upnCa^$s$=$cH&Y#G_SOjaY<nPi(6%qNIN{X@=UldlalJ+)yv(550Uu?Ef|kr^~#RS_GpK4D)ea~'
            'Jqc5J0BB+GlZHWZ<jdoi>I~H82Q1rsI#-?LS|}5VrQKOxI`g4JmC!*hGhf_WWseX@ifm+?hjYqIEmRh>>=|U6&ppAesq4M~761vC'
            'PBBIP6Da}H#Ru<fZ|rRB-rw=|N>*PTB?oa>avaE!qF>nYNXukgD6(4YTN&{v7_xA;ea3wCg<IdQnL|F%!G8;;v$^p&y!X!5_jccH'
            'qfx(Xw@|;T=5E}$Id(?X(v;kVy<sDu?6g$3)z8&|s?=c#5sC@NV1~r?VRaF7KcG0wjV(fy{Z@4;bf&Zsg<Pqj2eLZLKZ)*vKHJdt'
            '17E+-kmT7np_va+q&Vk=R6cP!jd5CK_VJz%qhYROvKE87HEO!-fy$w!J>(eMPqY=*XBvHgcJaQj<~@QN!Fs^p*98mUQmCXuNR|tm'
            '<wr+U|5jal{KnkO%oZ*M$Pv2>Ivaw$2sgx7DmZ#USp+qWh0eso-Milj#I7P?vScVga~%suaLg1I+KB>l5VirdR=7kuC9b}CmEAh%'
            'C_DCJ%NSe{mijoqD2%tV#uOsfKp3uuVwuMh6M2dV(-#A!BgI?9)YrHvL~rQryqemTptC~&2gGXpB5HDCnS#AQTnz$jhtrFU_h{{L'
            'Blvd|AQ;IIEX$-&rrc9-jEzz`6p`X`<+J;fdAY`3sEd7I$vhRy?1VC$I-+>xc1MUcvC%-68;wQT9-mP*$O0xQ5}iHau?A~wnKYpg'
            'LK<io$_c8$=?*7o!K)t`IiAe4-cR=2;Z#CIbXvB_ZZuT*?t{SwBOPTzIv5sK#<XVoebJ+0Kp5th1(^4Ag1eyc9~0%%+mE^w$9Q)b'
            '#DTG{Si=oY>@jmlR=aIOt?}NdQY0Bgx!NXQCW#q1{ux^$LX#CzXAFuQu}pi_il_tL_+vG>76$ucGii}ht|1(+%$~R=71%RlE)I;i'
            'v#}-azAd0dDY>9l-&dQBdTbxj@)z6w;FyMEb{B0{-b~lsh4QHOPD}2^F<9Z0_>%fP`}u~ttp1^HmgrX0M_cL->f>egNA)N5XZ4Bt'
            'RDGuYQeC>W{;j6JTSw84OJ4o;5as>J{LIWQQ@O2q0ii(hxZjBR&<X5-nuW|1G|Ad3%A165jJP^5?>onqFHxc~H6j*fu!<mEtpRsZ'
            'Ip~JB1fI~u0vpcG^{GzlI<PgVSQjPeocP*;Fcgi8pz}jTO~Lua*dOkx5tpn?dk6`MZ5tIgD$c3!C%OPqf-RO<rZFt}ABY3!)d3$|'
            'ISw0YVhKcTh?EIRb5NSEg7(<HyAe}o00PWJz$x<_n0Q2CX>5!g;s#vAIVlD<)?-zY2{ay+q$9W)j?5q~yc-?h>Jtu8b3Bn{7&R*1'
            'z?_vL#g&EAp)M1{0RsgnnKk=5Zh>+Ly>ZGOxY=~z9A}b~H|9f<I2`bP&%-rB2#n$A+0b}yvj$_ZU!sd<(0#<2$<{#oR7XwWvNOaq'
            'f@Q#h%LQm~^`qw$xZjA&HTI2<>u^!RDYPNSt6#!lLUH57Yn<XM$Z`b9Fc8}kU_`h9E%Pd3lb93CAuFVSpvAfmI%hOs+NJCqN<g;o'
            'w^w00M`$uuF|PP2Y&<5n*_CG?J8IlF8Sc@<X+x)$r5-y*&I}M1-aIWk&7^6(Wpq%C%4v0agqg=t@@~tVD*}0CvdUqk#x`*{G4R}N'
            'w_h2Po7zB7wyxvj@C!MIa7sW-lYK5pzIr{@ZQ4gjuL{y$Cs7jkCNs9pMY~ZOrQ<uNH|!vLg=|>rtN0jge4+DHkM{8O%9G0tChIGw'
            'N$cOoPm{67&9WbH^Zoy=obIUw_vfE?XT3lRmErG5pO39;I_S5s=&i}3&s%YSZuoD_;&&nW|DHR(`nmDuDp2R}W%p9^MR!?!Q{DVu'
            'F9G$>vE-|N;bQ=l0+H*@_ZO?n=vtfqO0c0K+~4-t2bw_R{9e;IpO}nkIFCU$S=Mi#^ycd9i61U1-NLEgU-Taz3)3GT9xI-Fdcq`|'
            '2LAzH*7)l`5dZ)'
        )
        assert isinstance(_MODEL_, _pydsdl_.DelimitedType)

    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Response:
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        def __init__(self,
                     entry_base_name: None | uavcan.file.Path_1_0 = None) -> None:
            """
            uavcan.file.List.Response.0.1
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param entry_base_name: uavcan.file.Path.1.0 entry_base_name
            """
            _warnings_.warn('Data type uavcan.file.List.Response.0.1 is deprecated', DeprecationWarning)

            self._entry_base_name: uavcan.file.Path_1_0

            if entry_base_name is None:
                self.entry_base_name = uavcan.file.Path_1_0()
            elif isinstance(entry_base_name, uavcan.file.Path_1_0):
                self.entry_base_name = entry_base_name
            else:
                raise ValueError(f'entry_base_name: expected uavcan.file.Path_1_0 '
                                 f'got {type(entry_base_name).__name__}')

        @property
        def entry_base_name(self) -> uavcan.file.Path_1_0:
            """
            uavcan.file.Path.1.0 entry_base_name
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._entry_base_name

        @entry_base_name.setter
        def entry_base_name(self, x: uavcan.file.Path_1_0) -> None:
            if isinstance(x, uavcan.file.Path_1_0):
                self._entry_base_name = x
            else:
                raise ValueError(f'entry_base_name: expected uavcan.file.Path_1_0 got {type(x).__name__}')

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: _Issue110_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.skip_bits(32)
            _ser_.pad_to_alignment(8)
            self.entry_base_name._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            assert 40 <= (_ser_.current_bit_length - _base_offset_) <= 936, \
                'Bad serialization of uavcan.file.List.Response.0.1'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: _Issue110_) -> List_0_1.Response:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f3_ holds the value of ""
            _des_.skip_bits(32)
            # Temporary _f4_ holds the value of "entry_base_name"
            _des_.pad_to_alignment(8)
            _f4_ = uavcan.file.Path_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = List_0_1.Response(
                entry_base_name=_f4_)
            _des_.pad_to_alignment(8)
            assert 40 <= (_des_.consumed_bit_length - _base_offset_) <= 936, \
                'Bad deserialization of uavcan.file.List.Response.0.1'
            assert isinstance(self, List_0_1.Response)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'entry_base_name=%s' % self.entry_base_name,
            ])
            return f'uavcan.file.List.Response.0.1({_o_0_})'

        _FIXED_PORT_ID_ = 406
        _EXTENT_BYTES_ = 300

        _MODEL_: _pydsdl_.DelimitedType = _restore_constant_(
            'ABzY8=q@;80{@LyZEqY`6<*hQvA1>8U`PuHdb?C;Ejg0}MdeK(nIxuY<Bf5gs7OWAJ2PkZUNU=UG<U}9jf6;r03!`*P^Pqn4}3sE'
            'MM(TGegPkO&YfBBZn73wTJ7w)_q;vlIcJWaocs9S8!h)&zL`!U8^xY)Dbq66k7W>(=ZDECO{~tTDmQLZtVei^4ksy9&#J8tt6x^#'
            '@`A68p{!D^a^rrU6=7avw0PybZ{!FjzFf$oP#SNbVf(JOxpzP|O^n6antw!@)rnz47aumy&#GRlxANQS!>WAQmwBG)pvcKqKZn&b'
            'LO#7!m9Ol}DAH!Qt0|6V;k5lo=F-nO#_}u6tsEsfLQoI!HJ=Nj2z2hpWQMt_dcp>(UAC(7oF64&Rlb3IC_AD^43bO?3Wh=ymb|J6'
            ')Mj~pF%b2Jy4XCm%h%?y*_W`cUQw_1R(dVYUR_4U>KjwN@~da$o@H`Um9IaPkV10T#ks@M#fohB6w`=I-k@*>mTATn*GIUq`M_8`'
            'G!*^B<TRvg!JhhhZw;`9(&qjsiKtRH%Pad+Wxnd&!r2}laY=tu9aQBPeVa=Y$t;@3^rQ&Nby!MesPjqHOUo}bNB)4(s{>Z=%p9xl'
            's_*w!*rfU)YoGIj*jD8?rzy>hBfI?h-(bm)bY25>A3vvsUiFi-D#ckw>|_)qu|~}|_h^&=upE57mr^G4B%AM!P-)a$-7UX#D>0$W'
            '$t=CfN%PH&46_^eFZGK!mf7Tmn-}~e85dN2RCRl6PeH+c1IACG_4<J{Lpq?8a(z}vkNlB52DDK4nG>q_r?wn^BW+M5e!#W8C#&T}'
            'u4)lWT<xv!)z(vsded<#jqB5X5fB1VsD|D<SyjK7yQoGuWy@gsxzsURs5f0htN{`xK|bFTi>3X6D=Jji@88+qIoLV8ci{BZ`{mcB'
            '#X%eySq@}@vTFwpX&FzgLuY-E$&jUB$l7l6jPvrPo8PXOLoU$le+ARt+j-Bwd#C^7!*`o#)Z@m5`c=7l<Hom6jZwKdH@W;^QV&Bm'
            'nyPIzR#yE^{kp(pi3n*hL!#=Wd=+#*rpQl|EcY>s`sHQcCPfyK&m+QjK$aKzE7k$%vyVA_>;}g(6nW)ZRi1x<ZbqIPBl*bcQG{$&'
            'a)jUMB%Gv5##bXyx56+f0#Mn{Xowoa{cJu$`$9dKFyq)SwAqJu!@KS=_*KrWyy+`x5mLqzg(sj6srtPV@4dC!YW2y&reJekdq=Pp'
            'VJDD{1V=B(gqRDF&_+Bs-2ILx4i$;S#1jFU>quCFVWzOqR^&LtY#n222pdbQMCV$E&05TPHtb|w2)9H=1LQCA#A#(ol8Z<KVVIhT'
            'F3aL1bQBTEK#Y|R6}yONpfTq}FmZZrpl4fN`+xurh*jG~)MQ1MyrCyLo(FfxUKsY#=wr6I-)KNEk|F5II9EwAR4@!jBRLVF;&$cS'
            'U1si$0bl5gBVfrq6<sz$23dy`ZGEpT#8t6VLzgBRm&}lJlr^$|Ns3sTM=YzchRe7Pg%HwMLs8C9_0BdpLkm`&WNLVJ(pX<^xy_}-'
            '5YeNeDRw<Wh1(<;Y%tQ25z<02&tybblfgg)l#dBwUO#|&pkurXYWopUI`4kEaahK?%^;4G%;s0|E+V#QEQ-~*t*LeD8(oSbqbawW'
            ';>$Qr#+JWMH4$NAa;Xi2BBw0VZfb?p25($ib*)7L|8OQVl$3i2=@sUYtxEx)hPgOS#I2pa*u5<<i$-L<O5IWK*3+Z6Fv~AB`^yV6'
            '9H;lNF{Sl!)mtkTXYc&Ty#yX*6F&eR_2fZY{%57tVklTBSjY|Fnq*3Ct|-*Dh4#qXhP>f^(@Y6wSvD(!=L-Ftuto+rGxM|w<AS>!'
            '214HW&{S}5qOp!pnD(7fiVEw2utlh9-y%w=R;FX#72EAy(2$PhD2-_w7gMaJ#NnXvw4F9U=h`4it_3o~=dl-P)A0oFnvT_oau%QC'
            '6N_A+Grdkd9NZ{r%iLXIe#1wS)^8Mado9-{qGNF#wm_PUz(gZD%N<+BdFFk=zzxym#x;|+(nBP)wO~*hK@J~Rs!nH{wKR_|XS%Tz'
            'g15jQlNfp!^$d0sc~jk(VZ<s*>JQ+^Kh@h-eRQIp_SGL1IQ6mmllnw`sy<VHR(~lk-@N`#y`x{pus<F3>aQp6eYcdce?NVi$?n(J'
            '9`a7J?B@IeB6ykkN5f{JG(J-@tH0IzMHd|Ze8%z9+t0~s?yHxvL%&w<&R5ji|3}*DUvo)f?V)4rYk9Tz!FqWG@8|j-pv+f<NtL~@'
            'iVCa<x9b&QDL(U9ypZ?onrxn;z3r8yE1FV$r2E0TTeH^Y*DMDTA3j-f$g19d0j)0bo%Ia>00'
        )
        assert isinstance(_MODEL_, _pydsdl_.DelimitedType)

    def __repr__(self) -> str:
        return 'uavcan.file.List.0.1()'


    _FIXED_PORT_ID_ = 406
    _MODEL_: _pydsdl_.ServiceType = _restore_constant_(
        'ABzY8=q@;80{_)mZEsvh6}Ia%wl{ALp=oGT7+ln@iF4yXMWA1Zn<f-(>_m<ef>3ocd+)4glDqd_X72TRBPt~lphUWeqFz9Ncn1kS'
        'AR$!<iC@6)fIq<pKJc8G**AL)RpASfV(-q&nKRFM&U4QA(V_1@K0RaqRiDWFv5Au)G(sz$sE53rh#-uzZk`!ch`Ks*OXwXHiLHJv'
        '>i6p9$MrjPvpN=P@%2)eA}nZJ&Q!<V6p89$OFX&qaH!H$XuITAq06W!^&Vr-hAHpjs52$siFg`x6nwa@Oc89lL+WZF+!5NSEG0Yh'
        'cl_t~>efta_S^MixEb=I(5hV)!qjiW=m9qyuBxkNuPKqlBR3jh%nR-=bkO!((;d|gR-C$>8nvB@_{(V_wuPR&(~+>PiZBuBb|LE)'
        'gYk$1t!@?rt&dlyZw?I6w%`ip)@h1v^sRccu09%?f~PUp@wlNUWm}%8j)=6-ec&34-MTsy##vNXGd1SUR7Y>}I9BQQ<lW>;)r-?F'
        'w3DeA@ZQ0%@e9b8Tg>1rxgyV1XEp^k?TDClGR-<AMUa(71a#z!gA?RY|LH{a+;|{wayTwe%2Tb`)(pi;o<@8|`>L}CL`rMkud5gC'
        'aExN)x`kkkM)z`2B%%vUJQta_{BmnSeo8jwGEl1)fq%{;RrKptUVX#^8g>Y#srz1O%~BxT?n7ZaF?IFIz|&Dk;B>L~dtDuULlw^7'
        'Tlnfdt>(fkuPb(t5!3IsvqT}5r`AO`0}cg9ej^u}7nvT<s7NXVSKg_fzmla9FGM<ZDP5XYYLQY(VEu`WGD*1Z?^}5|+~G+n>hIRg'
        '*224p{9O;m*Rbn_O`dLxO_7U29puu3u*-J=EjC1sL7jmui(glzpf-KLvh_!E)jZ`wnQ$y^&C=4DcMY;c?B+bR$-Pmw1su_chFO0y'
        'CyTL#vWHo+46+@{Ey2#o6`KGHfP_+~7$g5wN?_~at*bZJHrKXpY});@Q@u0@4*bx<kRuaGzp!bM=E*QoI@MxF^N2>lkcDghGv=#j'
        'Ub|EihpeOD_)pF>*4OTa*RO7TY3nWTjr^uRLO!kLE?)f1(3q%Bjmcfu?mGb`qYvd5<zxAd{GR+y2@#3~u0afm>nGK5(0y0LVV>zC'
        'MA~muCqt8!IuapeYG{G1=IK|W+Mv%()PP-^zwaT)vlpP5w~?f{=dmt-U{p88ZDqED?|DD!=aMJqV^Ft7PM2*^8C7B%F~;#DZN=`x'
        'P9LCMbS`$&8NtP1H6ZZof&}nXD7k@4niAW%8dN`(=k9)TZf0f!MFDa|=7Po=BP-1GG1g_|JrijJHI11{+3l@spAXoU6f8@VJ_F5F'
        '%#46xqA*j26_|st^`N!PB-}{0bYY3i8t5n)wqs2UE;B7UxIZg0yGv(T!D0o3VXDuXG?rwMr3lM9tS40@>4;c#6e<O4_w7Ebrg}MO'
        'Yzlw_VmZ6;S{T+8!FIrwf&j<i_AI3{{C-pf`yB}gMiK-~o)j`Gw<QeYpf2yTNK(4e-R;e+T;nX{#SX9}p0Xwx5h-pRiFo<-24m;h'
        'nu9LS6c(l1bVu%x1x%bJDt$m>4r?5lI9CK*>M3mGBUFQf4UW))RXZ{;Jeu*=r(14NC?O)MTl!!-4Q00bAh5wmBT~i<HWr%4;(XTW'
        'u(l|A0>jkW0Q0s=Pz#*>ScrW5_(7Lq2=4}g*vqsj&ZB}0vX~kK%OC5gH9Q+xiXbB?SA6h!l4LzYzlJ;EVU`wLr34BeuuNIiibMmv'
        'vDb33W*N@MVO%4mltZ{)nLaQs6gV>_F7`5ZWo?69dy_$ny21ptydgK8dfcAS@)N#4*r(x`{VLk5+)dZ5g>q7R$0hgp5Ug-ae1-fW'
        '+4;0QEB_=fmGVbV<c~MxPvp;<^5^mw@|W^g^4Ib=^0(E=*H%C0`ny#m{V?U_@1G#Oe|l(UW{arobDlvc5IpKPV!CvKeLzh^W(qNi'
        '+6vNJFxwbWb}-+bdcH)7!qk9Rn87Lm>GB(>lgdFid`n;nO)RjX=)5}CX}t<;vo2d@CFq>k+=4I^&P34oiWDy4>|&e`^TLTsT6WuT'
        '34!&EiWwy5nENAL04c#1El8#@%;^Wj0rYBs52hTt4K>jMM0G?;nds)AG?fB>ZQI?ju{!_(Vj|$=c@9i0qS%?~7$?LIT=+Rk2HLEK'
        's>Bm$JTgf|Fw-AwgSgOXVi%>48F)?pM4Dh!$oLG~Nh!K0S-2hYGReqcpa3P)*^Y`mPzJ6$qhx`aO#{wRBq?}9J|v031#h%1Tmyu_'
        '81kMrW|rHe!5Hk6=%NX9>v5W;=Ry0fid^E7G59oqrALBG37DbuqvvF(Z-UY_wvCTzP*TDuv?0e=yM)|?;>L;9I7uZ)lLtvZU^h9y'
        'h)@AF@hYM%F$I`hmI#4>7OM{EoQfXNu1m(D1VR_KdKFn?f+j;1ql_QJ#$xh1nX(KdL(aU5a9fOwIy!llTI>k9tOvL7&C;^rCNpO('
        '6}!bComR$2h<W5Coz|pS36Pg3E96Eu)6NgWdX~HX_~jwFg?9vLYZ}%MyO3fCqXLL2q4xyIX0OHChkbzb3KPoeBvJxzvP}C}_=CKc'
        'hH6f`-$3*V?pSKGcpq(SqSI7cY~%GxlTC-o>heL-`p4m?(b(H=**$8$|GSmrJvF2L{QcIf6=)_6{txtd-#XVpU&f-#qebs~ao;oi'
        '2e<ewNd8~v_OISE?n;4t4llds-HYz5ydW=q&>|rJJd}L-7d!?)DG<3{zqeSOM%U{8l%PW?P`~xQ2O2};yx|(>slgbBb02i0We@zP'
        'bbV!Z>cd6q4cz+PqJ4ZUj6XgsRy6r&%A|es91p!p2=D&9KdmwLQvTSKKY6%K^$6Ht_;mQ}hkl%Y0f(J%m7t9_#yuENZvQb$<rYk*'
        '-X^vB+wqy>J5pajkk)|+Rxs{cR^J0>C5ie_p<F50Gw2!`<;s9cqoj<TFp(l!5pN@@dn!gh)wpV_7&K(8(hX~f*j2WuU&CEdZ@PIR'
        'R<JOKV2fdy9Q3VA7dlyXq0Ke^KMdL`T?*KBpX`&eYTG~>vW|}SExDfFz5p6tu!JiCS?(T!%ae+_IuJNgN47NmU|Z)#r%xETXtk85'
        '{f1QAxX|*1!HFu*mX=m%mx{PI?Jar1!~@FrA@R_2A6?QsVu(%G`->pK{dxQ_A1Gf}{&xyEMb{Rl>6+K3CKB#<Q?zN%xYMTlGq}+('
        'i|#)&xa5bt^WR7Z{{H_ZLVN!fM<g5*mXSOxVCB3o@`JynjAs9d*#$imrm=4S{u>12W%_ZIeq6y1C;IC@nEf}9J|)>N+rhs8_d^J2'
        'j1~X@'
    )
    assert isinstance(_MODEL_, _pydsdl_.ServiceType)
