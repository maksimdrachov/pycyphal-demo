# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /Users/maksimdrachov/pycyphal-demo/public_regulated_data_types/uavcan/file/409.Write.1.0.dsdl
#
# Generated at:  2022-10-01 11:53:16.633213 UTC
# Is deprecated: yes
# Fixed port ID: 409
# Full name:     uavcan.file.Write
# Version:       1.0
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations

from typing import Any as _Issue110_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_
import warnings as _warnings_
import uavcan.file


def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))


# noinspection PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class Write_1_0:
    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Request:
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        def __init__(self,
                     offset: None | int | _np_.uint64 = None,
                     path:   None | uavcan.file.Path_1_0 = None,
                     data:   None | _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str = None) -> None:
            """
            uavcan.file.Write.Request.1.0
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param offset: truncated uint40 offset
            :param path:   uavcan.file.Path.1.0 path
            :param data:   saturated uint8[<=192] data
            """
            _warnings_.warn('Data type uavcan.file.Write.Request.1.0 is deprecated', DeprecationWarning)

            self._offset: int
            self._path:   uavcan.file.Path_1_0
            self._data:   _NDArray_[_np_.uint8]

            self.offset = offset if offset is not None else 0  # type: ignore

            if path is None:
                self.path = uavcan.file.Path_1_0()
            elif isinstance(path, uavcan.file.Path_1_0):
                self.path = path
            else:
                raise ValueError(f'path: expected uavcan.file.Path_1_0 '
                                 f'got {type(path).__name__}')

            if data is None:
                self.data = _np_.array([], _np_.uint8)
            else:
                data = data.encode() if isinstance(data, str) else data  # Implicit string encoding
                if isinstance(data, (bytes, bytearray)) and len(data) <= 192:
                    # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                    # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                    self._data = _np_.frombuffer(data, _np_.uint8)  # type: ignore
                elif isinstance(data, _np_.ndarray) and data.dtype == _np_.uint8 and data.ndim == 1 and data.size <= 192:  # type: ignore
                    # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                    self._data = data
                else:
                    # Last resort, slow construction of a new array. New memory may be allocated.
                    data = _np_.array(data, _np_.uint8).flatten()
                    if not data.size <= 192:  # Length cannot be checked before casting and flattening
                        raise ValueError(f'data: invalid array length: not {data.size} <= 192')
                    self._data = data
                assert isinstance(self._data, _np_.ndarray)
                assert self._data.dtype == _np_.uint8  # type: ignore
                assert self._data.ndim == 1
                assert len(self._data) <= 192

        @property
        def offset(self) -> int:
            """
            truncated uint40 offset
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._offset

        @offset.setter
        def offset(self, x: int | _np_.uint64) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 1099511627775:
                self._offset = x
            else:
                raise ValueError(f'offset: value {x} is not in [0, 1099511627775]')

        @property
        def path(self) -> uavcan.file.Path_1_0:
            """
            uavcan.file.Path.1.0 path
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._path

        @path.setter
        def path(self, x: uavcan.file.Path_1_0) -> None:
            if isinstance(x, uavcan.file.Path_1_0):
                self._path = x
            else:
                raise ValueError(f'path: expected uavcan.file.Path_1_0 got {type(x).__name__}')

        @property
        def data(self) -> _NDArray_[_np_.uint8]:
            """
            saturated uint8[<=192] data
            DSDL does not support strings natively yet. To interpret this array as a string,
            use tobytes() to convert the NumPy array to bytes, and then decode() to convert bytes to string:
            .data.tobytes().decode()
            When assigning a string to this property, no manual conversion is necessary (it will happen automatically).
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._data

        @data.setter
        def data(self, x: _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str) -> None:
            x = x.encode() if isinstance(x, str) else x  # Implicit string encoding
            if isinstance(x, (bytes, bytearray)) and len(x) <= 192:
                # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                self._data = _np_.frombuffer(x, _np_.uint8)  # type: ignore
            elif isinstance(x, _np_.ndarray) and x.dtype == _np_.uint8 and x.ndim == 1 and x.size <= 192:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._data = x
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                x = _np_.array(x, _np_.uint8).flatten()
                if not x.size <= 192:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'data: invalid array length: not {x.size} <= 192')
                self._data = x
            assert isinstance(self._data, _np_.ndarray)
            assert self._data.dtype == _np_.uint8  # type: ignore
            assert self._data.ndim == 1
            assert len(self._data) <= 192

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: _Issue110_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.add_aligned_unsigned(self.offset, 40)
            _ser_.pad_to_alignment(8)
            self.path._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
            assert len(self.data) <= 192, 'self.data: saturated uint8[<=192]'
            _ser_.add_aligned_u8(len(self.data))
            _ser_.add_aligned_array_of_standard_bit_length_primitives(self.data)
            _ser_.pad_to_alignment(8)
            assert 56 <= (_ser_.current_bit_length - _base_offset_) <= 2488, \
                'Bad serialization of uavcan.file.Write.Request.1.0'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: _Issue110_) -> Write_1_0.Request:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f0_ holds the value of "offset"
            _f0_ = _des_.fetch_aligned_unsigned(40)
            # Temporary _f1_ holds the value of "path"
            _des_.pad_to_alignment(8)
            _f1_ = uavcan.file.Path_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            # Temporary _f2_ holds the value of "data"
            # Length field byte-aligned: True; all elements byte-aligned: True.
            _len0_ = _des_.fetch_aligned_u8()
            assert _len0_ >= 0
            if _len0_ > 192:
                raise _des_.FormatError(f'Variable array length prefix {_len0_} > 192')
            _f2_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.uint8, _len0_)
            assert len(_f2_) <= 192, 'saturated uint8[<=192]'
            self = Write_1_0.Request(
                offset=_f0_,
                path=_f1_,
                data=_f2_)
            _des_.pad_to_alignment(8)
            assert 56 <= (_des_.consumed_bit_length - _base_offset_) <= 2488, \
                'Bad deserialization of uavcan.file.Write.Request.1.0'
            assert isinstance(self, Write_1_0.Request)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'offset=%s' % self.offset,
                'path=%s' % self.path,
                'data=%s' % repr(bytes(self.data))[1:],
            ])
            return f'uavcan.file.Write.Request.1.0({_o_0_})'

        _FIXED_PORT_ID_ = 409
        _EXTENT_BYTES_ = 600

        _MODEL_: _pydsdl_.DelimitedType = _restore_constant_(
            'ABzY8EGjr-0{^8~TaO$^6&`z?^>`e|$u4n-B1pvn?^xI!uVoR35Q$}z4Pm^K&3YaC0o1DLu9+&iZ**1f>_kLzBtRR~K){{A0}n_@'
            'k;qdXc;L~mNJ#tz{s8}h?^N|%)}A3;R$5JWRh`>+&iPLDy%Qh*^K8TZmCt9RP=}G{YmqA+srPs<5}qHVah7UjL{*-7T|_FzW4JfU'
            'M0LNq_(Ao4)h?HPl_VmsWTQND)8s{9id-B$@|d6S7%HAE_<q0>udkr{b`D+MuJ}<Qw5iIbzb|sF(u5S9e7AnSUv-Xk8b7N(sLInm'
            'HzrrT!U$dc5Ly?wJULaBk8LRtg;PITe#i~?4LP?+Jj*FawT~04w-T)ei3s0Hj2MXgXi%s9o-%$Ul7W#`hm;3g8$V7%QORe^b30>2'
            'B<5{mZ=1F#qMuf~Rrw`f8=izb4`&s9SoCD8Tu%FaEr7}iKTLzFY*bi&+8LH#mM80{R{7*CqB|T4<m2**F=p~9;53yhpId-fp7T*v'
            'KJzZeDpqb-S2k$%Xvk-L5s6qN#z82bt2KYM)0EH47dj0JOn&XK=#{5{M#ckWMpY*(SL*QmJ|$$X^ovgJgx`yFRbCi-I)w&Kn}^@4'
            '^6~E~<NUpe*V@x^$xpMYWQ&yOQQS)-1z=aVMVtZ$gJOF-6FE0&K3m#>R45?%X8H7Hngra4WbRQ4mrmv)q0+?pv)v+!cs_dM<g&ld'
            'qe4`_s@k3AN4h89s$sYRsb_Y1G7!5W6Gkm^>8>C11Aq#FJ-aAxk9Ar6VwF^#20h@|_PwR@B-LaQagy&GqqB{VI!*UmplroK#uM9Z'
            '-J&PpQGkSm+lNb1%#)A`$H*4S??h%x?t)yy>uT8qNL195L{PCFP4lZZ%@93x^NpR2-HpAscdfj<U4CVpE;y76O&%R-$L6lZo=0Qt'
            'kU7=Qc|fbEndVmgjQ#TXwU;ZZM(b$$Mb5OgH}3d1-srx$_r2O1Ijl{{AD2t(>sKerM7cUcM1F7NxQ&#?@`^MvlRuI73eZC+5C+vu'
            'SRIy6p!5$!=x1qed=*yR@+n`ZMIH#Bde^r=mM7^aQau#Z4ruqlcJzIu{n$%jvs-9e#Cay>ceRQ`L@U#Myl10elt~_44pGb%y1eM2'
            'xcyuVkad`!vL2+D9b<r6$S$PGhPUor@d*6N5H+p(l54n>Q>(-1z6wP3p}cVCg{4NL3%V8|BXwSDgOL`dM_7v)dCx==fagM{5_W5E'
            '>$=DGq+n?hjTj1Fg-i=5rlMv_GlRW;nh(K(Oh;TxcK)UFq*kkBK#J{J8;ciNF8YX{nbb<<X=+%gfG|{zSew?OG_WPY(moqX6-Y7>'
            'ioODev);(cQ8*&M=(TnQz(HX-z3^IS))wBtW9K~&<`6wg$VM#>uD0)JNmL|3(B_emX)%yc3_~#=u|QG-Q|vaff@UFXp)dA<CDkcw'
            'lM<02>Oh1Sztv*wGTU&_WvRlUWI!=;hb&;?EK<o`T60*#WaL~CaA~L@$fu}!ixp1Mf>ygSRy^IQwa?ewqEv!bR9w`_cC5<m#el#@'
            'MQV{St|4f09*WDDWUMF5P+*yE6TrNuBFqJ+KNKRHH9x*UXu`WiAP&=9o6DH3f;1)?$*Rq|(wf*tmm<k%%1d?fc@(8XO+OP!c$g-J'
            'tAs$|<0?~@wF1#X-Po{Pu2~BEFvfGFlzIr^70F%gQURL@)#5N^n;TuW^*RF=#X@_P{Epmo?6Gx(-OujuFoeZNSRK3H#|0>J+f}Do'
            '93|l~_v(e*JG~oRtDjz;&voDKJdm%=9li6t?z*LSXsSItZf1`Cpnme9e%@R{I1Pl;SpGLNWjcDA%m2aXp@bm(a&!HatL!zle)T&0'
            '2K(l<S8eAF>2k@kJT+;MMs?3>R%nh?BFj2PRUo%6p&qVRLjIfr__{nN|0LV;uky1(mWT2eUHMD->$d!jybrKHmY>Mq%HNeM*RH%$'
            'Uto_gr~LgPSn~bjjfUNH6~e(Vaf&y4NwYoVNC?eFwV6dc5Y}s|P0)lU4=sPtZHcW>q-%AxNvFnjwqvz5Dugx0joo!ON2W6oD9F=^'
            '){HK<y@p=CEzyyLlWPUiddYbaDL64^f*h9-8Y1BDz;+T*T|E=(7N*WX$H6Ne?xT+^;Y?jAKtUuYTGn%jlT}mmK_rZbMjo^7OjD=n'
            'y8ta|Nu@p(KI9*{Q~M+)E~N=50heuNR4gvFtcSC>;J?OEtM|kdY4UzddbDDra-fMgGovx73>6I0X9169<_R7h{;df|!Ep=@rKJeR'
            'XivjSEd|i1nu+hytU?za=+Is}-N+NVh-|uC3D_t}Vv=hY<RS+8<K$_6fB%0cXPdrF?C@#LV{IAY9}R8WSN_5E`4#l}=S$P&Pdmqo'
            'dFy|6$FF1gFQ;aYJLM0pJ93bx@fGx>`}#SDX8!EIX>R$qNhiy{<MJ#Hs3)uK2P@?{-09pmaPCWi>6Sn8DZ~CpK4lB|bo<Wn1%%o~'
            '<PTOJ9S;^S+Wg1L{Mq6C3uc@d3-}KJ00'
        )
        assert isinstance(_MODEL_, _pydsdl_.DelimitedType)

    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Response:
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        def __init__(self,
                     error: None | uavcan.file.Error_1_0 = None) -> None:
            """
            uavcan.file.Write.Response.1.0
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param error: uavcan.file.Error.1.0 error
            """
            _warnings_.warn('Data type uavcan.file.Write.Response.1.0 is deprecated', DeprecationWarning)

            self._error: uavcan.file.Error_1_0

            if error is None:
                self.error = uavcan.file.Error_1_0()
            elif isinstance(error, uavcan.file.Error_1_0):
                self.error = error
            else:
                raise ValueError(f'error: expected uavcan.file.Error_1_0 '
                                 f'got {type(error).__name__}')

        @property
        def error(self) -> uavcan.file.Error_1_0:
            """
            uavcan.file.Error.1.0 error
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._error

        @error.setter
        def error(self, x: uavcan.file.Error_1_0) -> None:
            if isinstance(x, uavcan.file.Error_1_0):
                self._error = x
            else:
                raise ValueError(f'error: expected uavcan.file.Error_1_0 got {type(x).__name__}')

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: _Issue110_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.pad_to_alignment(8)
            self.error._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            assert 16 <= (_ser_.current_bit_length - _base_offset_) <= 16, \
                'Bad serialization of uavcan.file.Write.Response.1.0'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: _Issue110_) -> Write_1_0.Response:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f3_ holds the value of "error"
            _des_.pad_to_alignment(8)
            _f3_ = uavcan.file.Error_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = Write_1_0.Response(
                error=_f3_)
            _des_.pad_to_alignment(8)
            assert 16 <= (_des_.consumed_bit_length - _base_offset_) <= 16, \
                'Bad deserialization of uavcan.file.Write.Response.1.0'
            assert isinstance(self, Write_1_0.Response)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'error=%s' % self.error,
            ])
            return f'uavcan.file.Write.Response.1.0({_o_0_})'

        _FIXED_PORT_ID_ = 409
        _EXTENT_BYTES_ = 48

        _MODEL_: _pydsdl_.DelimitedType = _restore_constant_(
            'ABzY8EGjr-0{@j(-D@0G6wlVC*`!TOjg3W-jtI5IcJgH#^`*qkrYxJxteb3$NV(jZx!H5c?94E8XU!Ib_My_^g%*1I;FDkASM@;z'
            '!J>!{KG+J1f05_zY&M&AgYLra-nk#Y^E>yP^E-3x;JvZ2q4r0fh+1Ca`6fwN%&E_>QpaZ|al=LwCR{Kj$CsJU8#wefS`kxs)#>Z%'
            'eRWD6B0LCKtYAovuZuW!MH;icTZTzM8wl}yN}DbX%uSBimt({-t1OAaAi>2vX|g!sVW5#lE_KFtRXJB4`aoS*@-U%7#N0^*OVky$'
            'ALZ^QC5Kly^SxajW5lC^5~0b#NHz&$@@OxuVjPF)%n_K_F$_nq;I?C(?Z@}C8^!u|coXeT)q;fA1Ll<i!RjpDdmD#|!v*nKP#2)e'
            'lgP@Yi6D*8Lsl=z>B<g}K4unhZA~xXO$^;oRVAM#iJ*Z;W3LzJX6m3T!%ga^$lxIHLRZNlg|kyKU%)HIGoniZj>F5H(aG{8yaKPn'
            'nGE58T~=Vi492yC_2Q1dY&(isqQkPs+kBM@oTL5@IxNc3&6v7+Ho^6k&KTEaZdPe05(kaV{TG+<npL*!%N8kCt9G?b3l`zcjuE&Z'
            'htHoow{UI%#8J!MAS-swTJD3En;!rvU$Xb5l^cZ8_)?)zTwf>4MXOZoN9(}c!T@kbN(fb|77H78^&Lc$7fL2G&lp%1tPx@L8Zo2Z'
            '%zL`}j4&{$5m5n#04j_q<bg;G5#p@JW9Eu5ZmGxE%+C$tT*<n$v|3sw_**M#I*UcKj&yXb8Cn$#o)|$W3`{oe8Jl5@RG1-XTxTNN'
            'm9!G1{sfIdf;F*HS}l?d+a{|^)r-Y`mps2X$R*pg4Pvj5^~zGAKicbqT#`=8^;)H3S2y}+z``yZlT$r9NSs!tts3?$oPhH%4;P^T'
            'Z^IhA3zvZbg%GyjDm38+T!-86A$$b)QdA+2VL7`LQ$pR66J(QbGmk`JEC~0MC6AIMOk<Z39R#A2M9C5T=W|EN(F(SO?TVhgi<*|3'
            'LA9-+AY#3bH|SQv8y;3YgiU;oT5c->>Yw#kBUJK*D0O`9l9<&~Uz^`mWjuW-6JwMxZCA;Owji5x=B%kzNC_>0Qv_&&oMILTEyGRj'
            'GIa~HYsO-U&T$Q9j$w02ePM)~n9n__WP}lm+nQx+rF48WdvZtQb|n>o#pBOP9(jw4)%No`>*}d|iiDAp#(p44tKo#`GcsSpJHVEq'
            't=nxH*ll`xsS6xC7CewoSE%Rlp#H=r_*Ji3sqfRc_4q0*-d3l|lXnsa`)QORsB%7a(9Z@Bbi2U;-PVH<-EuGjc&wb)$A<1C*o;u+'
            'Y0&PyR_e497~2ZVx*}#~>QML?4gC$%34D4JKC|F+_~I0N317k2@D1FDZ{a)n%xkl6bUOT=$ieqF+v)uS{Fw3m34ZRn^;>uJ3;dx;'
            '!$T~TNBI2{cmCC-1BbCaPwKV|)Bl4E{L^C@y=L12(?+db%gJdhg6yRxCV;Ytf7#2yZlxMnsi(_1U4B`;_ND$n9>X51iz(<ES~;3U'
            '786$Kw~60-qGe#T_CP&Xr9qulS;Pe2FHg3zD9+-6Uab6`_7y#};1T+#@2wl!_64$}v-nA$MSax#7r)avs}%|W00'
        )
        assert isinstance(_MODEL_, _pydsdl_.DelimitedType)

    def __repr__(self) -> str:
        return 'uavcan.file.Write.1.0()'


    _FIXED_PORT_ID_ = 409
    _MODEL_: _pydsdl_.ServiceType = _restore_constant_(
        'ABzY8EGjr-0{^vG-ES1v6<=d8%LanM4KzV%Z)gi9m<1aMkbZ9Lb+Fdnb=Ni!iE4Cr=Gu46?96mNY;TlEP$>~eBPA`9wrNwTeW+9^'
        'Qq#xwjfbjLUn*7VAJBiJed_PrJNsdK7vfY!^4*y`_k5r8JLhtL|3@F4%&C9LSN)b1T29djMPPHsew#NOQ8Y}i>3g9ai8Og`Ndz0V'
        'DVAHlNFS%?9;EN4<H->t5I>AX7#R`m%Up6~MmTm8B-ZwmBZlp|B2Y(`q98V-IM~7LfZ_5cM7<dE4U@aYRU10o4#2Be*HY3XZ)}Jl'
        'v^|#?9lVu2KTaz{mE8O31L$e+C<^RG9EmXf0k{q@t#c|(4$RuZvATK`42wrxTQrE=56DP+11H8-+|XWgg*E3!Voe0wje5>#*pcA~'
        'cP)}>g_xTh?rM4#-1U{@#A2Hfkrk)$ZGk?KMen8cH2IPdM%=Y{VD&P36gTA2WW-xt4F$Zi->^J0O>!x=U($l*%kpscbTk?5_2?o8'
        '19?o2wS6W}z)xMe<kSF<1p#lR$;n$ByV#jms+4GVXHp19G=<wv3YKyHS|u;PF3(hQWSBhnFm5D=;0>RfcGOBMesVlB&se2^^rarx'
        'bo-5l6Q;?Twx(UzK<Q}bdzu`6!;ZAROL)yRO@<B6PZKtXN!V&OJjaG(#}-7>gC8O!Tg?{%kG!BawM}Uwf#iJh!nEg_JQ8l-qhv0f'
        '41`OmiStLRvE%Tdwd>@FvB8~Kq#vZ?mHdZcLsm04d>>RN>)c%vb>WN19;DJeqsh16R1mzSHs#$mFXg|c?WUC+J>b~F{o&*w<z(z|'
        'qOT0m+1!Vfy#9@mwqncYuBx_b+z`-6A|Up{!(qAJk3zaQMzWB8`+b#i=j8-mzntXZBueT|AShY4hxvOd%pg6qR9-CAOUt#oqL+7*'
        'm)qfjLV*ZLqiyAwuPfhkr_CKShgJh_(k^l)Kbt+{d$RA!wUn|^DH=UXnZiQpjxk@ZzPWre(?-6NiI5MH;mOIV4l|LA^#GC4XlZOC'
        'rh&XFTQZi9<a;sT!4fcoa>hy@CeI`Fw}fT*UJx0!l~$8uM(D+XDGaJzLpd@zNI#C<Kte47p0`v*KStPxE&|O~P`0r1NR!_S?WP55'
        'rMH21zh$<3$(;)pk~u|{#|<Pm0DKKmhxjh)fqFzE2B3xHf|_I$CySSg<oq-uXc{vl51~>(r5@_`kUo;<@4Pac%T)o_!eYd(SST^#'
        '!on8znvAq(!Zm?&7PDQpvOIge$d;vGp6j$265qC1D8QJKn%N<X@NLx#Hi3dHba*J)>5Hd{ZD_k|#8~Z(WAhvf#47A(k*BBv&x@F4'
        '!^2?JV&k;uc&17b=B=_#X`7NnSYp)%hO<UX(UCbKI9Dvx1)PJ#(tM${2-&zOt`*toViDqCJ#$G$Mh~o3?<h%RB)MRmJCXF_H3`NL'
        ')Z{H@N-AKoU0D`WFN7@A#RhyydCJC#iEv@HDXep^7Z|(1O4@b4XXB8&MmBQoS-6Qa$9C`0p7u3FI$9M0l{Re<@~&5lgBf<c1+HqR'
        '&A9s|<KCZhfkFvbv72!gY>lc+4F=?FWMn8@#zPQB0k^~jbTZZu(WbyQO&#!g!*<XYG=ED7zgK*FfC$Oo1#;r17lhFT^j1L}-4Mab'
        '#Ol=Q$VQbS$SBH*Eco1Uyv>k)I+W1Rb0coM<P_e{GFzdRDGJCNWtNUL^B^C>cz}>n4Z*zFy%*|GK&DH%xaqO!QkBilFkn$rgvC^r'
        '<xPzqm2K#Lbdg&YB<@0We63*s^7ZGml8?88a2tEWf!N!f4Q^yl-|CNbrOFfeM&H)kU+X2kb&I;%&UVvtjAu_4*!Sy8Fee9dawAXa'
        'Dc#nSANd@uhXMlglj+GDQ|#Mpa_Txe&tALoO;vfDG+Z)2@FLIjoUCR;7Ka?6M3loOvI4Qy0WD&@67mBw;8l4_{$5^?f0v)d^2ZP5'
        'Ppa~<{OP#-nf$r@SpGu(Qhp+Tl^nlv=|(odZbMG_n}<NjclYIT>Z8sO4uolXcvC}~sv!+RC^pJX-{GcET2pQUCPLCs;Rj7i>?~P&'
        'Hp@1t+33pFsCJeT;Vk2k`l=^K7W%@pK~E<NJ-qbiv#90U5*0~)(xpILC$tuh4JF!05MUUgCIb96RV5MBWj!G)VX6#N9JJ!r2I@!w'
        'PFIx}5JYsMpfm?LNsTf*a6}}WR*@-nx}gi{UVxHRppqT4cIZdyWIBnCN}dZyz_86CyD26LO2b~i;4kxIXumDGo+j<vphr8(D(y7U'
        '^rKcAR5oo0q-z0pdin_-wf_qpjDq559Cj#$)%JGRJWoLYwW=QbCVCla^8klx?9?q!gt4Q-rBgszNfez}Ya<6C(C<1={p<UGJK0<G'
        '<Ae^MW;ix3ZTz92Rr$)_>N>xKI{(9Pcl*=IP~30-Px|<EZ2$34?{Uq1$G!#!If`4*3;OnR3dQ`{UW!}(qf^Q9pBSFS7S&|B@Z@-M'
        '0yCYy0|$l_=x)KTs|@>sc*+Lg>B60T0|2!O%by(I-5!*`=;ObR_wOB;MUhE9W)YF8e=w6)=($<G)bFmYsnWK0`(8<p^%9nY0DbN$'
        'chVl$jrLCD2lOo|Yj4rBj_<2g`V8(vm!5tH*v8_>O0`n0-L4wtdcAWg>E(9dwX0VzU)=-8L)F@{F<V=y&h*o5Y7d<9bG3nL4edpx'
        'Bc<u-^3swqQ?AaH`>C~W^70<o9i9WLxq5jT*SNQ+8Gm=KD2fy4MG=9fp!UJ7iy7u&F4W_d0!!7w!X1-ox<i|($-NjiSG`r5pPMnT'
        'u9QigYh}#y6B;h*nnq|#gR{PgtkM_^{ETS8i+XP|yVTfAu%4ftn=c#7wVE+ss=rz8=j5qtdvS7YW!b3B8cU0%>HgfV@5M=!luIj%'
        'i?#Z4{|va?Wv6j-{ToBM-1;lDyh_U%TCUJ?iI(rs@;WUyX_=v=PD_=RyR_V)WsMe-mVg$QmUn2`qUC*BeuM?c{Aj?~^}K?Uog)`6'
        'rpd)^x6-<5l+@e#w)<(P>pr_f_9E_RZ#Nr7Hya%|lphcp@Dyxu^4|I<WY~*X!q3%mCZ3_$`eU%#txb;->nG_%2GL6L7gXfm3-^cQ'
        'fBuin4b6UVZ-eZ?z3taS14D3ZSK~^%(?GZH<Z<+1_J7>FZc*!F<U-(X&}n(<L{<-fAy599mcP;RSDm%+>B7fDPx0y_nkeE%@xR#6'
        'm~EgJ000'
    )
    assert isinstance(_MODEL_, _pydsdl_.ServiceType)
