# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /Users/maksimdrachov/pycyphal-demo/public_regulated_data_types/uavcan/node/port/7510.List.0.1.dsdl
#
# Generated at:  2022-10-01 11:53:16.167946 UTC
# Is deprecated: no
# Fixed port ID: 7510
# Full name:     uavcan.node.port.List
# Version:       0.1
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations

from typing import Any as _Issue110_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_
import uavcan.node.port


def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))


# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class List_0_1:
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    MAX_PUBLICATION_PERIOD: int = 10

    def __init__(self,
                 publishers:  None | uavcan.node.port.SubjectIDList_0_1 = None,
                 subscribers: None | uavcan.node.port.SubjectIDList_0_1 = None,
                 clients:     None | uavcan.node.port.ServiceIDList_0_1 = None,
                 servers:     None | uavcan.node.port.ServiceIDList_0_1 = None) -> None:
        """
        uavcan.node.port.List.0.1
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param publishers:  uavcan.node.port.SubjectIDList.0.1 publishers
        :param subscribers: uavcan.node.port.SubjectIDList.0.1 subscribers
        :param clients:     uavcan.node.port.ServiceIDList.0.1 clients
        :param servers:     uavcan.node.port.ServiceIDList.0.1 servers
        """
        self._publishers:  uavcan.node.port.SubjectIDList_0_1
        self._subscribers: uavcan.node.port.SubjectIDList_0_1
        self._clients:     uavcan.node.port.ServiceIDList_0_1
        self._servers:     uavcan.node.port.ServiceIDList_0_1

        if publishers is None:
            self.publishers = uavcan.node.port.SubjectIDList_0_1()
        elif isinstance(publishers, uavcan.node.port.SubjectIDList_0_1):
            self.publishers = publishers
        else:
            raise ValueError(f'publishers: expected uavcan.node.port.SubjectIDList_0_1 '
                             f'got {type(publishers).__name__}')

        if subscribers is None:
            self.subscribers = uavcan.node.port.SubjectIDList_0_1()
        elif isinstance(subscribers, uavcan.node.port.SubjectIDList_0_1):
            self.subscribers = subscribers
        else:
            raise ValueError(f'subscribers: expected uavcan.node.port.SubjectIDList_0_1 '
                             f'got {type(subscribers).__name__}')

        if clients is None:
            self.clients = uavcan.node.port.ServiceIDList_0_1()
        elif isinstance(clients, uavcan.node.port.ServiceIDList_0_1):
            self.clients = clients
        else:
            raise ValueError(f'clients: expected uavcan.node.port.ServiceIDList_0_1 '
                             f'got {type(clients).__name__}')

        if servers is None:
            self.servers = uavcan.node.port.ServiceIDList_0_1()
        elif isinstance(servers, uavcan.node.port.ServiceIDList_0_1):
            self.servers = servers
        else:
            raise ValueError(f'servers: expected uavcan.node.port.ServiceIDList_0_1 '
                             f'got {type(servers).__name__}')

    @property
    def publishers(self) -> uavcan.node.port.SubjectIDList_0_1:
        """
        uavcan.node.port.SubjectIDList.0.1 publishers
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._publishers

    @publishers.setter
    def publishers(self, x: uavcan.node.port.SubjectIDList_0_1) -> None:
        if isinstance(x, uavcan.node.port.SubjectIDList_0_1):
            self._publishers = x
        else:
            raise ValueError(f'publishers: expected uavcan.node.port.SubjectIDList_0_1 got {type(x).__name__}')

    @property
    def subscribers(self) -> uavcan.node.port.SubjectIDList_0_1:
        """
        uavcan.node.port.SubjectIDList.0.1 subscribers
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._subscribers

    @subscribers.setter
    def subscribers(self, x: uavcan.node.port.SubjectIDList_0_1) -> None:
        if isinstance(x, uavcan.node.port.SubjectIDList_0_1):
            self._subscribers = x
        else:
            raise ValueError(f'subscribers: expected uavcan.node.port.SubjectIDList_0_1 got {type(x).__name__}')

    @property
    def clients(self) -> uavcan.node.port.ServiceIDList_0_1:
        """
        uavcan.node.port.ServiceIDList.0.1 clients
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._clients

    @clients.setter
    def clients(self, x: uavcan.node.port.ServiceIDList_0_1) -> None:
        if isinstance(x, uavcan.node.port.ServiceIDList_0_1):
            self._clients = x
        else:
            raise ValueError(f'clients: expected uavcan.node.port.ServiceIDList_0_1 got {type(x).__name__}')

    @property
    def servers(self) -> uavcan.node.port.ServiceIDList_0_1:
        """
        uavcan.node.port.ServiceIDList.0.1 servers
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._servers

    @servers.setter
    def servers(self, x: uavcan.node.port.ServiceIDList_0_1) -> None:
        if isinstance(x, uavcan.node.port.ServiceIDList_0_1):
            self._servers = x
        else:
            raise ValueError(f'servers: expected uavcan.node.port.ServiceIDList_0_1 got {type(x).__name__}')

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: _Issue110_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        _ser_.pad_to_alignment(8)
        # Delimited serialization of uavcan.node.port.SubjectIDList.0.1, extent 32776, max bit length 8200
        _nested_ = _ser_.fork_bytes(1029)  # Also includes the length of the delimiter header.
        _nested_.skip_bits(32)  # Leave space for the delimiter header.
        assert _nested_.current_bit_length == 32
        self.publishers._serialize_(_nested_)
        _nested_length_ = _nested_.current_bit_length - 32
        del _nested_
        assert 8 <= _nested_length_ <= 8200
        assert _nested_length_ % 8 == 0
        _ser_.add_aligned_u32(_nested_length_ // 8)  # Jump back and serialize the delimiter header.
        _ser_.skip_bits(_nested_length_)             # Return to the current offset.
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        # Delimited serialization of uavcan.node.port.SubjectIDList.0.1, extent 32776, max bit length 8200
        _nested_ = _ser_.fork_bytes(1029)  # Also includes the length of the delimiter header.
        _nested_.skip_bits(32)  # Leave space for the delimiter header.
        assert _nested_.current_bit_length == 32
        self.subscribers._serialize_(_nested_)
        _nested_length_ = _nested_.current_bit_length - 32
        del _nested_
        assert 8 <= _nested_length_ <= 8200
        assert _nested_length_ % 8 == 0
        _ser_.add_aligned_u32(_nested_length_ // 8)  # Jump back and serialize the delimiter header.
        _ser_.skip_bits(_nested_length_)             # Return to the current offset.
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        # Delimited serialization of uavcan.node.port.ServiceIDList.0.1, fixed bit length 512 (64 bytes)
        _ser_.add_aligned_u32(64)  # Delimiter header is constant in this case.
        _ser_base_offset_ = _ser_.current_bit_length
        self.clients._serialize_(_ser_)
        assert _ser_.current_bit_length - _ser_base_offset_ == 512
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        # Delimited serialization of uavcan.node.port.ServiceIDList.0.1, fixed bit length 512 (64 bytes)
        _ser_.add_aligned_u32(64)  # Delimiter header is constant in this case.
        _ser_base_offset_ = _ser_.current_bit_length
        self.servers._serialize_(_ser_)
        assert _ser_.current_bit_length - _ser_base_offset_ == 512
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        assert 128 <= (_ser_.current_bit_length - _base_offset_) <= 67728, \
            'Bad serialization of uavcan.node.port.List.0.1'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: _Issue110_) -> List_0_1:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "publishers"
        _des_.pad_to_alignment(8)
        # Delimited deserialization of uavcan.node.port.SubjectIDList.0.1, extent 32776
        _dh_ = _des_.fetch_aligned_u32()  # Read the delimiter header.
        if _dh_ * 8 > _des_.remaining_bit_length:
            raise _des_.FormatError(f'Delimiter header specifies {_dh_ * 8} bits, '
                                    f'but the remaining length is only {_des_.remaining_bit_length} bits')
        _nested_ = _des_.fork_bytes(_dh_)
        _des_.skip_bits(_dh_ * 8)
        _f0_ = uavcan.node.port.SubjectIDList_0_1._deserialize_(_nested_)
        del _nested_
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f1_ holds the value of "subscribers"
        _des_.pad_to_alignment(8)
        # Delimited deserialization of uavcan.node.port.SubjectIDList.0.1, extent 32776
        _dh_ = _des_.fetch_aligned_u32()  # Read the delimiter header.
        if _dh_ * 8 > _des_.remaining_bit_length:
            raise _des_.FormatError(f'Delimiter header specifies {_dh_ * 8} bits, '
                                    f'but the remaining length is only {_des_.remaining_bit_length} bits')
        _nested_ = _des_.fork_bytes(_dh_)
        _des_.skip_bits(_dh_ * 8)
        _f1_ = uavcan.node.port.SubjectIDList_0_1._deserialize_(_nested_)
        del _nested_
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f2_ holds the value of "clients"
        _des_.pad_to_alignment(8)
        # Delimited deserialization of uavcan.node.port.ServiceIDList.0.1, extent 1024
        _dh_ = _des_.fetch_aligned_u32()  # Read the delimiter header.
        if _dh_ * 8 > _des_.remaining_bit_length:
            raise _des_.FormatError(f'Delimiter header specifies {_dh_ * 8} bits, '
                                    f'but the remaining length is only {_des_.remaining_bit_length} bits')
        _nested_ = _des_.fork_bytes(_dh_)
        _des_.skip_bits(_dh_ * 8)
        _f2_ = uavcan.node.port.ServiceIDList_0_1._deserialize_(_nested_)
        del _nested_
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f3_ holds the value of "servers"
        _des_.pad_to_alignment(8)
        # Delimited deserialization of uavcan.node.port.ServiceIDList.0.1, extent 1024
        _dh_ = _des_.fetch_aligned_u32()  # Read the delimiter header.
        if _dh_ * 8 > _des_.remaining_bit_length:
            raise _des_.FormatError(f'Delimiter header specifies {_dh_ * 8} bits, '
                                    f'but the remaining length is only {_des_.remaining_bit_length} bits')
        _nested_ = _des_.fork_bytes(_dh_)
        _des_.skip_bits(_dh_ * 8)
        _f3_ = uavcan.node.port.ServiceIDList_0_1._deserialize_(_nested_)
        del _nested_
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        self = List_0_1(
            publishers=_f0_,
            subscribers=_f1_,
            clients=_f2_,
            servers=_f3_)
        _des_.pad_to_alignment(8)
        assert 128 <= (_des_.consumed_bit_length - _base_offset_) <= 67728, \
            'Bad deserialization of uavcan.node.port.List.0.1'
        assert isinstance(self, List_0_1)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'publishers=%s' % self.publishers,
            'subscribers=%s' % self.subscribers,
            'clients=%s' % self.clients,
            'servers=%s' % self.servers,
        ])
        return f'uavcan.node.port.List.0.1({_o_0_})'

    _FIXED_PORT_ID_ = 7510
    _EXTENT_BYTES_ = 8466

    _MODEL_: _pydsdl_.StructureType = _restore_constant_(
        'ABzY8EGjr-0{^{PTW{RP6`oz|LdlXZQY@!V9FOZJkrQieIkscFNn_cL3w13^@I5F3c9tCNaLpyRyhz>vMirn*td>O=FpEAFXwjk%'
        'MbU>o^k4K}6ev)jKwk>vrEt#~p1o1KGSDD3pgkmK&T!_;Ip6mUy*2WSb4Qu}mmF&}?a+2hW+($kxXve{;>wa~`Spe$I+0A1={r#n'
        'TTvXyyUm77pQR^1O`oLm$*AdxI<y~(#fBxklIPp9)bN9-bkhl=G%?H#8HA4SrHUov_v!jsT4v?K=jo?uvey(*6gZVQl41HWj5uU2'
        'onC1&dc%>f-JQdvX^Tjh5l#%=GJRdTP90`#_fK`qbUaT6*k$6L2h-?lR-?&lJJxU~uGFLzEnnA*QR8Z&J#RGyb5#e(cQ$!t$gG1v'
        'G}Gjz8_r{C-;`c8QcL)#e`eFBbY)$7QMQI*A!r1+EN26H?7iyyt`z-CfLK<X$aM8<(sBU;V~H>_>#&|wolNG|+5@0l=^C`HU=!}f'
        'XX$O2rWr=UvqfO{4zwLtk_i~8AuK0qrYnpmBWA@7)8vizJiEPN%2ED4O{T6oQMUR!a7*(|_LzPnP57`u!e+hVyN;D6vn#UhLlh#|'
        'wAF?TMC1p(`)Vl%@<F|y%-og@899Ud70pLDd36;!?!Ohgt_Yg>UNG2(aATSNJe@BWT44p&K4R7#kCt5*kM-3!1~qmCxReXnm$gC&'
        'w|v|Xp3d-FaRr?rt48V~e3XK(?ZZ+Y-c^!2o-H5qKsEvy!mfur!iP3oI_r)MxSm3Z-wk5P7Zx~mI~|A8F7X?}4fSJD$)0-pc?vJ<'
        'q@y~K9KJ6gcOY+uWu2N=#ZKxU8J_xC+84@fK-xo6&EA6rS3PMjdy%Zlp#L4E^0Ydw-cjeabu31+;HrBG!};z@jBCD!ITv+ZX4U#&'
        '=RGS+55ZN{)Xn5*J82-|5FHG8Uws(2b+QPzJudi6tOvrvr;xeE4Z4Q*WaQ%FrNtC00JlsgvptYxR+<^Y;e;GzsUNC(425Rn=2-$j'
        'Cf!c<nd?~JCI-%Q?DST0&<y=Jup~6N(rgGQqhuV7>r~QYVhvFB@ftpT28mfX4VZQhY8@svT^El+r*6aal)nM@ji%LXDB&*HPy;F8'
        'Ok9DQFaueI^n=%Tu@Ah*vTcMV;YNbN8KucgXERHSr86arTpD4)&zeevFuee=2PUxLSTfy)?YT%E3*f>rWdq?=Wyql?x8=G6`^_s&'
        'ows2_T9CGu4tOb57u2OJ;_s;sXd`vStqI$9yy}j+gw|!+A}pk7C^}$`M%Ftm8?g7c$_Lac{H;B~s?5r*TqL_EE7kG{-H+1!7}}9m'
        'c^qxARW_)70_}LKJc)L!Ro;tsv{jy>{?lmpw95O)Z$FK9fcy`lJ<ux8kewy_64^s!=g1x=`!d;YkUc{76|%3AJxca9vd74Bvd77O'
        'lk5qy-y-`u**D0(Np_y>NwRN|eVgnlvI}HOWKWYlLw1quS+ehtJxBID*$ZUfC3}(VC9;>vew*xjWZx(I9kL&gy^`5j-Jy#NV9%GI'
        'Co^r{SVv(%LZFKx2B64dxqt<(&OHU6At`zYzz9p)8%Q+BfygsZE2vZYlGcEv?HlUwZLF8w*l5grq}inW92`=e<V>xu{A)jEc{^D{'
        'bq9z<hS+LA>z4ysiDveOP{yG&U9D8^C1Q!=CHL2Rm<5?eL>wT3S0qQ?04@q6DQxVA)r@4topoOKGv9t@$^c*><8--Xj<}=)$E6SJ'
        '4G<1_9#Kyqd_US&TesAw>c{iyGxfRpLOoU6>L<xW50>xK?)}K6THBfl2JYl92LcPjJ^B^l34|K{hT{p#;Rz!=VT30vhbN5igb|)F'
        '!V^Y#!U#_o;R(y(2_rmVgeQ#fgb|)F!V^Y#!U#_o;Rz!=VT31)@PrYbFv1f?c)|!z7~u&cJYj?<jPQgJo-o1_MtH&qPZ;3|BRpY*'
        'Cyelf5uPx@6GnK#2u~Q{2_rmVgeQ#fgb|)F!V^Y#!U#_o;Rz!=VT31)@PrYbFv1f?c)|!zSQ}4Rt5Zp%kspC@fEv2Il(Cy|p=3g>'
        '+ceL4)vS($>+UEH$HThP#o-Q6GzT(8^HjgdxVE&mbZz<WM<i=hMER<kT9lmaiV`fAd39GESN~BDY7YvGspqwi!PGv2pLj?esh_GO'
        'nd>{nKou?K>geGm7@`XoVb;BOWu?iE2I%Pl;($9L2OV9Nr+DbY!Z9?0Yc;eGI-f`mqFzJFrXRaDpvxl(p#vwxXl^^}ARJ;h;*rl4'
        'oIG3@-kStLr^VBPh2k&}T5W_)z^Qr&YQ*QD4N&yyO*q9jB`9Qn1E$NPO`prh;KKceR(h9VHXx@OFz^QH;f0JV^m0#4!b`DB?=I`D'
        'rLC5Pm=aF0&D^@%JDuz|BT?Ojd;Ycy>vXZI`|KZCw|~BnWv2BpHqR}Y;}!My+CJFVj69H9;OGN@mtz#8`>+F!x#w9~sH1@2$1?qY'
        'Ts?s7!^Havd0DfeLnjAoRk(v=73>~lUAkgyC37IMvx9tKDxfGZ`RMW&M0Z#ud4DATO;=y86b|HA!_a3yilDJIjGQ^N&TkDR=Si*F'
        'LxmC_OTCXd=QMjmUklD01A82ztCxFNcEHDqOuxVQV}*LXa{_$36UsvOsC9mY6$i)jI$eDid-MmYK!L)RRs0!FuEiX=7KvPoM6QJ#'
        'xf(>SMIzTRB3FaRb(F}}AaX6{$hAo1Y7n{35V=kfxf(>SV??fFM6L#r>lBge43X;*B3FaRb(YArm=o)5ay>}oS|oCvBXTu}T#pgC'
        '&Jekd61j3B*O!P~4I<Y!iCkYLay>}oI!5IB7Lh9_a-Ab`og#8A61kotay>!hdW6XJAd#y<<a&|F^$d~gJdrCWa(y``){PvwLN>H='
        'pF@CLzt%4yUx|A6oL|f{Z|ylk+Mn=ev<N?i;tNT)w;BhKZt~|I#?AWX85cPQL<NrmXG60SeJjZ^s{>>f`gP!Ei31^5HiV^>2=Q4j'
        'b!V^YP?!}+=wnYpXW;D^Kk&jh8xDR^Y3qMr*T}bgci7>+!(p|*ApR4L^a4Q-7S{fNea35lM1#1LMHK`3zlFLsRqW-F{pj-rc(1UL'
        '+EaYV*GCuSt=-syjqJu2d}JtFj9adQ#jt}2YQM+zKnK0gU8We6?M835&#f#yG}rE3y}5jC>F)CCEpzR|+smuhu?#oAA4*6pJN$TZ'
        'nYJ6q1aocOsm6gm3S+8xe#GO3jh~z_v$Tj4bwBp9W1>?B35edvM?6$o?h)%{o$H|31SFyGnwz3oO8aZBxOgUCa=*sK9<2QqGvPP*'
        'a~8MucX)Lkuin9*%lLDllOikkj}ETKnRm}Go+%9zz<(|F3SbNX={`Mky(F+&-d>(u;3TNS_5#}<!`gl4H<g4~1RRu^<D-yt-6r<~'
        '5UvZ#w@#LN$JqIvjux;{7tafhpZHwAT7?mD5N^v#tnV^a4XTJ<(eXq_Je`nY4fQK;uU%``f2hGEuJ4$+Q<9}q9YCT)-04k%dv|Zj'
        'Qt+N!g1KOqu$>xOljDDRWbXLC3l+z8q9)F~E$2N6f<AZz`4$B}YIL29DA{dCR6Re89INZ<$Tn)WQ;psQ;plEuc1FQW)u)tRO)o;e'
        '?z^tP8R8}{MY`AO8WzmbO_-G92RK0&4g)TSO>+S{+ed@J1;(kiN(07&oxF2%^+A4Igmb8`A>)a4P{X@asihF;?H3~T5YYQS^{oA@'
        'hbMZpvj#!knBn9Vwfem^R$x1iC_7qe$BJ#QA3$4UWRTa6mL9JyXlogRymqu8MwR{xa~kEMKOF!7'
    )
    assert isinstance(_MODEL_, _pydsdl_.StructureType)
